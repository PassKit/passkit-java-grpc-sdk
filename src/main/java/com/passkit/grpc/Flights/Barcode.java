// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/flights/barcode.proto

// Protobuf Java Version: 3.25.0
package com.passkit.grpc.Flights;

public final class Barcode {
  private Barcode() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
   * </pre>
   *
   * Protobuf enum {@code flights.PassengerStatus}
   */
  public enum PassengerStatus
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Ticket issuance/passenger not checked in
     * </pre>
     *
     * <code>ISSUED_NOT_CHECKED_IN = 0;</code>
     */
    ISSUED_NOT_CHECKED_IN(0),
    /**
     * <pre>
     * Ticket issuance/passenger checked in
     * </pre>
     *
     * <code>ISSUED_CHECKED_IN = 1;</code>
     */
    ISSUED_CHECKED_IN(1),
    /**
     * <pre>
     * Baggage checked - passenger not checked in
     * </pre>
     *
     * <code>BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN = 2;</code>
     */
    BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN(2),
    /**
     * <pre>
     * Baggage checked - passenger checked in
     * </pre>
     *
     * <code>BAGGAGE_CHECKED_PASSENGER_CHECKED_IN = 3;</code>
     */
    BAGGAGE_CHECKED_PASSENGER_CHECKED_IN(3),
    /**
     * <pre>
     * Passenger passed security check
     * </pre>
     *
     * <code>PASSENGER_PASSED_SECURITY_CHECK = 4;</code>
     */
    PASSENGER_PASSED_SECURITY_CHECK(4),
    /**
     * <pre>
     * Passenger passed gate and exit (coupon used)
     * </pre>
     *
     * <code>PASSENGER_PASSED_GATE = 5;</code>
     */
    PASSENGER_PASSED_GATE(5),
    /**
     * <pre>
     * Transit
     * </pre>
     *
     * <code>TRANSIT = 6;</code>
     */
    TRANSIT(6),
    /**
     * <pre>
     * Standby. Seat number not printed on boarding pass at time of check in
     * </pre>
     *
     * <code>STANDBY = 7;</code>
     */
    STANDBY(7),
    /**
     * <pre>
     * Boarding data re-validation done
     * </pre>
     *
     * <code>BOARDING_DATA_REVALIDATION_DONE = 8;</code>
     */
    BOARDING_DATA_REVALIDATION_DONE(8),
    /**
     * <pre>
     * Original boarding line used at time of ticket issuance
     * </pre>
     *
     * <code>ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE = 9;</code>
     */
    ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE(9),
    /**
     * <pre>
     * Up or down grading required
     * </pre>
     *
     * <code>UP_OR_DOWN_GRADING_REQUIRED = 10;</code>
     */
    UP_OR_DOWN_GRADING_REQUIRED(10),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Ticket issuance/passenger not checked in
     * </pre>
     *
     * <code>ISSUED_NOT_CHECKED_IN = 0;</code>
     */
    public static final int ISSUED_NOT_CHECKED_IN_VALUE = 0;
    /**
     * <pre>
     * Ticket issuance/passenger checked in
     * </pre>
     *
     * <code>ISSUED_CHECKED_IN = 1;</code>
     */
    public static final int ISSUED_CHECKED_IN_VALUE = 1;
    /**
     * <pre>
     * Baggage checked - passenger not checked in
     * </pre>
     *
     * <code>BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN = 2;</code>
     */
    public static final int BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN_VALUE = 2;
    /**
     * <pre>
     * Baggage checked - passenger checked in
     * </pre>
     *
     * <code>BAGGAGE_CHECKED_PASSENGER_CHECKED_IN = 3;</code>
     */
    public static final int BAGGAGE_CHECKED_PASSENGER_CHECKED_IN_VALUE = 3;
    /**
     * <pre>
     * Passenger passed security check
     * </pre>
     *
     * <code>PASSENGER_PASSED_SECURITY_CHECK = 4;</code>
     */
    public static final int PASSENGER_PASSED_SECURITY_CHECK_VALUE = 4;
    /**
     * <pre>
     * Passenger passed gate and exit (coupon used)
     * </pre>
     *
     * <code>PASSENGER_PASSED_GATE = 5;</code>
     */
    public static final int PASSENGER_PASSED_GATE_VALUE = 5;
    /**
     * <pre>
     * Transit
     * </pre>
     *
     * <code>TRANSIT = 6;</code>
     */
    public static final int TRANSIT_VALUE = 6;
    /**
     * <pre>
     * Standby. Seat number not printed on boarding pass at time of check in
     * </pre>
     *
     * <code>STANDBY = 7;</code>
     */
    public static final int STANDBY_VALUE = 7;
    /**
     * <pre>
     * Boarding data re-validation done
     * </pre>
     *
     * <code>BOARDING_DATA_REVALIDATION_DONE = 8;</code>
     */
    public static final int BOARDING_DATA_REVALIDATION_DONE_VALUE = 8;
    /**
     * <pre>
     * Original boarding line used at time of ticket issuance
     * </pre>
     *
     * <code>ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE = 9;</code>
     */
    public static final int ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE_VALUE = 9;
    /**
     * <pre>
     * Up or down grading required
     * </pre>
     *
     * <code>UP_OR_DOWN_GRADING_REQUIRED = 10;</code>
     */
    public static final int UP_OR_DOWN_GRADING_REQUIRED_VALUE = 10;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PassengerStatus valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PassengerStatus forNumber(int value) {
      switch (value) {
        case 0: return ISSUED_NOT_CHECKED_IN;
        case 1: return ISSUED_CHECKED_IN;
        case 2: return BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_IN;
        case 3: return BAGGAGE_CHECKED_PASSENGER_CHECKED_IN;
        case 4: return PASSENGER_PASSED_SECURITY_CHECK;
        case 5: return PASSENGER_PASSED_GATE;
        case 6: return TRANSIT;
        case 7: return STANDBY;
        case 8: return BOARDING_DATA_REVALIDATION_DONE;
        case 9: return ORIGINAL_BOARDING_LINE_USED_AT_TICKET_ISSUANCE;
        case 10: return UP_OR_DOWN_GRADING_REQUIRED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PassengerStatus>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PassengerStatus> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PassengerStatus>() {
            public PassengerStatus findValueByNumber(int number) {
              return PassengerStatus.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(0);
    }

    private static final PassengerStatus[] VALUES = values();

    public static PassengerStatus valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PassengerStatus(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.PassengerStatus)
  }

  /**
   * <pre>
   * Passenger Description as detailed in IATA PSC Resolution 792 Attachment 'C'.
   * </pre>
   *
   * Protobuf enum {@code flights.PassengerDescription}
   */
  public enum PassengerDescription
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Adult
     * </pre>
     *
     * <code>ADULT = 0;</code>
     */
    ADULT(0),
    /**
     * <pre>
     * Adult male
     * </pre>
     *
     * <code>MALE = 1;</code>
     */
    MALE(1),
    /**
     * <pre>
     * Adult female
     * </pre>
     *
     * <code>FEMALE = 2;</code>
     */
    FEMALE(2),
    /**
     * <pre>
     * Child
     * </pre>
     *
     * <code>CHILD = 3;</code>
     */
    CHILD(3),
    /**
     * <pre>
     * Infant
     * </pre>
     *
     * <code>INFANT = 4;</code>
     */
    INFANT(4),
    /**
     * <pre>
     * No passenger (cabin baggage)
     * </pre>
     *
     * <code>NO_PASSENGER = 5;</code>
     */
    NO_PASSENGER(5),
    /**
     * <pre>
     * Adult travelling with infant
     * </pre>
     *
     * <code>ADULT_WITH_INFANT = 6;</code>
     */
    ADULT_WITH_INFANT(6),
    /**
     * <pre>
     * Unaccompanied minor
     * </pre>
     *
     * <code>UNACCOMPANIED_MINOR = 7;</code>
     */
    UNACCOMPANIED_MINOR(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Adult
     * </pre>
     *
     * <code>ADULT = 0;</code>
     */
    public static final int ADULT_VALUE = 0;
    /**
     * <pre>
     * Adult male
     * </pre>
     *
     * <code>MALE = 1;</code>
     */
    public static final int MALE_VALUE = 1;
    /**
     * <pre>
     * Adult female
     * </pre>
     *
     * <code>FEMALE = 2;</code>
     */
    public static final int FEMALE_VALUE = 2;
    /**
     * <pre>
     * Child
     * </pre>
     *
     * <code>CHILD = 3;</code>
     */
    public static final int CHILD_VALUE = 3;
    /**
     * <pre>
     * Infant
     * </pre>
     *
     * <code>INFANT = 4;</code>
     */
    public static final int INFANT_VALUE = 4;
    /**
     * <pre>
     * No passenger (cabin baggage)
     * </pre>
     *
     * <code>NO_PASSENGER = 5;</code>
     */
    public static final int NO_PASSENGER_VALUE = 5;
    /**
     * <pre>
     * Adult travelling with infant
     * </pre>
     *
     * <code>ADULT_WITH_INFANT = 6;</code>
     */
    public static final int ADULT_WITH_INFANT_VALUE = 6;
    /**
     * <pre>
     * Unaccompanied minor
     * </pre>
     *
     * <code>UNACCOMPANIED_MINOR = 7;</code>
     */
    public static final int UNACCOMPANIED_MINOR_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static PassengerDescription valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static PassengerDescription forNumber(int value) {
      switch (value) {
        case 0: return ADULT;
        case 1: return MALE;
        case 2: return FEMALE;
        case 3: return CHILD;
        case 4: return INFANT;
        case 5: return NO_PASSENGER;
        case 6: return ADULT_WITH_INFANT;
        case 7: return UNACCOMPANIED_MINOR;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<PassengerDescription>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        PassengerDescription> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<PassengerDescription>() {
            public PassengerDescription findValueByNumber(int number) {
              return PassengerDescription.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(1);
    }

    private static final PassengerDescription[] VALUES = values();

    public static PassengerDescription valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private PassengerDescription(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.PassengerDescription)
  }

  /**
   * <pre>
   * Source of transaction.
   * </pre>
   *
   * Protobuf enum {@code flights.Source}
   */
  public enum Source
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Web
     * </pre>
     *
     * <code>W = 0;</code>
     */
    W(0),
    /**
     * <pre>
     * Airport Kiosk
     * </pre>
     *
     * <code>K = 1;</code>
     */
    K(1),
    /**
     * <pre>
     * Transfer kiosk
     * </pre>
     *
     * <code>X = 2;</code>
     */
    X(2),
    /**
     * <pre>
     * Remote / off-site kiosk
     * </pre>
     *
     * <code>R = 3;</code>
     */
    R(3),
    /**
     * <pre>
     * Mobile device
     * </pre>
     *
     * <code>M = 4;</code>
     */
    M(4),
    /**
     * <pre>
     * Airport agent
     * </pre>
     *
     * <code>O = 5;</code>
     */
    O(5),
    /**
     * <pre>
     * Town agent
     * </pre>
     *
     * <code>T = 6;</code>
     */
    T(6),
    /**
     * <pre>
     * Third party vendor
     * </pre>
     *
     * <code>V = 7;</code>
     */
    V(7),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Web
     * </pre>
     *
     * <code>W = 0;</code>
     */
    public static final int W_VALUE = 0;
    /**
     * <pre>
     * Airport Kiosk
     * </pre>
     *
     * <code>K = 1;</code>
     */
    public static final int K_VALUE = 1;
    /**
     * <pre>
     * Transfer kiosk
     * </pre>
     *
     * <code>X = 2;</code>
     */
    public static final int X_VALUE = 2;
    /**
     * <pre>
     * Remote / off-site kiosk
     * </pre>
     *
     * <code>R = 3;</code>
     */
    public static final int R_VALUE = 3;
    /**
     * <pre>
     * Mobile device
     * </pre>
     *
     * <code>M = 4;</code>
     */
    public static final int M_VALUE = 4;
    /**
     * <pre>
     * Airport agent
     * </pre>
     *
     * <code>O = 5;</code>
     */
    public static final int O_VALUE = 5;
    /**
     * <pre>
     * Town agent
     * </pre>
     *
     * <code>T = 6;</code>
     */
    public static final int T_VALUE = 6;
    /**
     * <pre>
     * Third party vendor
     * </pre>
     *
     * <code>V = 7;</code>
     */
    public static final int V_VALUE = 7;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static Source valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static Source forNumber(int value) {
      switch (value) {
        case 0: return W;
        case 1: return K;
        case 2: return X;
        case 3: return R;
        case 4: return M;
        case 5: return O;
        case 6: return T;
        case 7: return V;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<Source>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        Source> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<Source>() {
            public Source findValueByNumber(int number) {
              return Source.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(2);
    }

    private static final Source[] VALUES = values();

    public static Source valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private Source(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.Source)
  }

  /**
   * <pre>
   * Document type that the barcode represents.
   * </pre>
   *
   * Protobuf enum {@code flights.DocType}
   */
  public enum DocType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Boarding pass
     * </pre>
     *
     * <code>B = 0;</code>
     */
    B(0),
    /**
     * <pre>
     * Itinerary receipt
     * </pre>
     *
     * <code>I = 1;</code>
     */
    I(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Boarding pass
     * </pre>
     *
     * <code>B = 0;</code>
     */
    public static final int B_VALUE = 0;
    /**
     * <pre>
     * Itinerary receipt
     * </pre>
     *
     * <code>I = 1;</code>
     */
    public static final int I_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static DocType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static DocType forNumber(int value) {
      switch (value) {
        case 0: return B;
        case 1: return I;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<DocType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        DocType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<DocType>() {
            public DocType findValueByNumber(int number) {
              return DocType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(3);
    }

    private static final DocType[] VALUES = values();

    public static DocType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private DocType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.DocType)
  }

  /**
   * <pre>
   * International Documentation Verification.
   * </pre>
   *
   * Protobuf enum {@code flights.InternationalDocVerification}
   */
  public enum InternationalDocVerification
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * No travel document verification required
     * </pre>
     *
     * <code>NOT_REQUIRED = 0;</code>
     */
    NOT_REQUIRED(0),
    /**
     * <pre>
     * Travel document verification required before boarding
     * </pre>
     *
     * <code>REQUIRED = 1;</code>
     */
    REQUIRED(1),
    /**
     * <pre>
     * Travel document verification successfully completed
     * </pre>
     *
     * <code>COMPLETED = 2;</code>
     */
    COMPLETED(2),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * No travel document verification required
     * </pre>
     *
     * <code>NOT_REQUIRED = 0;</code>
     */
    public static final int NOT_REQUIRED_VALUE = 0;
    /**
     * <pre>
     * Travel document verification required before boarding
     * </pre>
     *
     * <code>REQUIRED = 1;</code>
     */
    public static final int REQUIRED_VALUE = 1;
    /**
     * <pre>
     * Travel document verification successfully completed
     * </pre>
     *
     * <code>COMPLETED = 2;</code>
     */
    public static final int COMPLETED_VALUE = 2;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static InternationalDocVerification valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static InternationalDocVerification forNumber(int value) {
      switch (value) {
        case 0: return NOT_REQUIRED;
        case 1: return REQUIRED;
        case 2: return COMPLETED;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<InternationalDocVerification>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        InternationalDocVerification> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<InternationalDocVerification>() {
            public InternationalDocVerification findValueByNumber(int number) {
              return InternationalDocVerification.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(4);
    }

    private static final InternationalDocVerification[] VALUES = values();

    public static InternationalDocVerification valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private InternationalDocVerification(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.InternationalDocVerification)
  }

  /**
   * <pre>
   * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
   * </pre>
   *
   * Protobuf enum {@code flights.IDADIndicator}
   */
  public enum IDADIndicator
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * No Industry discount
     * </pre>
     *
     * <code>NONE = 0;</code>
     */
    NONE(0),
    /**
     * <pre>
     * Industry discount, other carrier employee/all other eligible persons, firm reservation
     * </pre>
     *
     * <code>IDN1 = 1;</code>
     */
    IDN1(1),
    /**
     * <pre>
     * Industry discount, other carrier employee/all other eligible persons, space available
     * </pre>
     *
     * <code>IDN2 = 2;</code>
     */
    IDN2(2),
    /**
     * <pre>
     * Industry discount, other carrier employee travelling on duty, firm reservation
     * </pre>
     *
     * <code>IDB1 = 3;</code>
     */
    IDB1(3),
    /**
     * <pre>
     * Industry discount, other carrier employee travelling on duty, pace available
     * </pre>
     *
     * <code>IDB2 = 4;</code>
     */
    IDB2(4),
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 880
     * </pre>
     *
     * <code>AD = 5;</code>
     */
    AD(5),
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 200g
     * </pre>
     *
     * <code>DG = 6;</code>
     */
    DG(6),
    /**
     * <pre>
     * Discount not covered by industry regulations (for online use only)
     * </pre>
     *
     * <code>DM = 7;</code>
     */
    DM(7),
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 886
     * </pre>
     *
     * <code>GE = 8;</code>
     */
    GE(8),
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 788
     * </pre>
     *
     * <code>IG = 9;</code>
     */
    IG(9),
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 888
     * </pre>
     *
     * <code>RG = 10;</code>
     */
    RG(10),
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 884
     * </pre>
     *
     * <code>UD = 11;</code>
     */
    UD(11),
    /**
     * <pre>
     * Industry discount ticket - no classification designator
     * </pre>
     *
     * <code>ID = 12;</code>
     */
    ID(12),
    /**
     * <pre>
     * Industry discount, member's own employee travelling on duty, firm reservation
     * </pre>
     *
     * <code>IDFS1 = 13;</code>
     */
    IDFS1(13),
    /**
     * <pre>
     * Industry discount, member's own employee travelling on duty, space available
     * </pre>
     *
     * <code>IDFS2 = 14;</code>
     */
    IDFS2(14),
    /**
     * <pre>
     * Industry discount, member's own employee/dependant, firm reservation
     * </pre>
     *
     * <code>IDR1 = 15;</code>
     */
    IDR1(15),
    /**
     * <pre>
     * Industry discount, member's own employee/dependant, space available
     * </pre>
     *
     * <code>IDR2 = 16;</code>
     */
    IDR2(16),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * No Industry discount
     * </pre>
     *
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <pre>
     * Industry discount, other carrier employee/all other eligible persons, firm reservation
     * </pre>
     *
     * <code>IDN1 = 1;</code>
     */
    public static final int IDN1_VALUE = 1;
    /**
     * <pre>
     * Industry discount, other carrier employee/all other eligible persons, space available
     * </pre>
     *
     * <code>IDN2 = 2;</code>
     */
    public static final int IDN2_VALUE = 2;
    /**
     * <pre>
     * Industry discount, other carrier employee travelling on duty, firm reservation
     * </pre>
     *
     * <code>IDB1 = 3;</code>
     */
    public static final int IDB1_VALUE = 3;
    /**
     * <pre>
     * Industry discount, other carrier employee travelling on duty, pace available
     * </pre>
     *
     * <code>IDB2 = 4;</code>
     */
    public static final int IDB2_VALUE = 4;
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 880
     * </pre>
     *
     * <code>AD = 5;</code>
     */
    public static final int AD_VALUE = 5;
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 200g
     * </pre>
     *
     * <code>DG = 6;</code>
     */
    public static final int DG_VALUE = 6;
    /**
     * <pre>
     * Discount not covered by industry regulations (for online use only)
     * </pre>
     *
     * <code>DM = 7;</code>
     */
    public static final int DM_VALUE = 7;
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 886
     * </pre>
     *
     * <code>GE = 8;</code>
     */
    public static final int GE_VALUE = 8;
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 788
     * </pre>
     *
     * <code>IG = 9;</code>
     */
    public static final int IG_VALUE = 9;
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 888
     * </pre>
     *
     * <code>RG = 10;</code>
     */
    public static final int RG_VALUE = 10;
    /**
     * <pre>
     * Ticket issued pursuant to Resolution 884
     * </pre>
     *
     * <code>UD = 11;</code>
     */
    public static final int UD_VALUE = 11;
    /**
     * <pre>
     * Industry discount ticket - no classification designator
     * </pre>
     *
     * <code>ID = 12;</code>
     */
    public static final int ID_VALUE = 12;
    /**
     * <pre>
     * Industry discount, member's own employee travelling on duty, firm reservation
     * </pre>
     *
     * <code>IDFS1 = 13;</code>
     */
    public static final int IDFS1_VALUE = 13;
    /**
     * <pre>
     * Industry discount, member's own employee travelling on duty, space available
     * </pre>
     *
     * <code>IDFS2 = 14;</code>
     */
    public static final int IDFS2_VALUE = 14;
    /**
     * <pre>
     * Industry discount, member's own employee/dependant, firm reservation
     * </pre>
     *
     * <code>IDR1 = 15;</code>
     */
    public static final int IDR1_VALUE = 15;
    /**
     * <pre>
     * Industry discount, member's own employee/dependant, space available
     * </pre>
     *
     * <code>IDR2 = 16;</code>
     */
    public static final int IDR2_VALUE = 16;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static IDADIndicator valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static IDADIndicator forNumber(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return IDN1;
        case 2: return IDN2;
        case 3: return IDB1;
        case 4: return IDB2;
        case 5: return AD;
        case 6: return DG;
        case 7: return DM;
        case 8: return GE;
        case 9: return IG;
        case 10: return RG;
        case 11: return UD;
        case 12: return ID;
        case 13: return IDFS1;
        case 14: return IDFS2;
        case 15: return IDR1;
        case 16: return IDR2;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<IDADIndicator>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        IDADIndicator> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<IDADIndicator>() {
            public IDADIndicator findValueByNumber(int number) {
              return IDADIndicator.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(5);
    }

    private static final IDADIndicator[] VALUES = values();

    public static IDADIndicator valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private IDADIndicator(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.IDADIndicator)
  }

  /**
   * <pre>
   * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
   * </pre>
   *
   * Protobuf enum {@code flights.SelecteeIndicator}
   */
  public enum SelecteeIndicator
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not selected for special security screening
     * </pre>
     *
     * <code>NOT_SELECTEE = 0;</code>
     */
    NOT_SELECTEE(0),
    /**
     * <pre>
     * Selected for special security screening
     * </pre>
     *
     * <code>SELECTEE = 1;</code>
     */
    SELECTEE(1),
    /**
     * <pre>
     * Passenger eligible for TSA PreCheck®
     * </pre>
     *
     * <code>TSA_PRECHECK = 3;</code>
     */
    TSA_PRECHECK(3),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not selected for special security screening
     * </pre>
     *
     * <code>NOT_SELECTEE = 0;</code>
     */
    public static final int NOT_SELECTEE_VALUE = 0;
    /**
     * <pre>
     * Selected for special security screening
     * </pre>
     *
     * <code>SELECTEE = 1;</code>
     */
    public static final int SELECTEE_VALUE = 1;
    /**
     * <pre>
     * Passenger eligible for TSA PreCheck®
     * </pre>
     *
     * <code>TSA_PRECHECK = 3;</code>
     */
    public static final int TSA_PRECHECK_VALUE = 3;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static SelecteeIndicator valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static SelecteeIndicator forNumber(int value) {
      switch (value) {
        case 0: return NOT_SELECTEE;
        case 1: return SELECTEE;
        case 3: return TSA_PRECHECK;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<SelecteeIndicator>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        SelecteeIndicator> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<SelecteeIndicator>() {
            public SelecteeIndicator findValueByNumber(int number) {
              return SelecteeIndicator.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(6);
    }

    private static final SelecteeIndicator[] VALUES = values();

    public static SelecteeIndicator valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private SelecteeIndicator(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.SelecteeIndicator)
  }

  /**
   * <pre>
   * Passenger eligibility for Fast-track privileges.
   * </pre>
   *
   * Protobuf enum {@code flights.FastTrack}
   */
  public enum FastTrack
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Not Eligible
     * </pre>
     *
     * <code>N = 0;</code>
     */
    N(0),
    /**
     * <pre>
     * Eligible
     * </pre>
     *
     * <code>Y = 1;</code>
     */
    Y(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Not Eligible
     * </pre>
     *
     * <code>N = 0;</code>
     */
    public static final int N_VALUE = 0;
    /**
     * <pre>
     * Eligible
     * </pre>
     *
     * <code>Y = 1;</code>
     */
    public static final int Y_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static FastTrack valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static FastTrack forNumber(int value) {
      switch (value) {
        case 0: return N;
        case 1: return Y;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<FastTrack>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        FastTrack> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<FastTrack>() {
            public FastTrack findValueByNumber(int number) {
              return FastTrack.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.getDescriptor().getEnumTypes().get(7);
    }

    private static final FastTrack[] VALUES = values();

    public static FastTrack valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private FastTrack(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:flights.FastTrack)
  }

  public interface ConditionalItemsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:flights.ConditionalItems)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
     * </pre>
     *
     * <code>.flights.PassengerDescription passengerDescription = 1;</code>
     * @return The enum numeric value on the wire for passengerDescription.
     */
    int getPassengerDescriptionValue();
    /**
     * <pre>
     * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
     * </pre>
     *
     * <code>.flights.PassengerDescription passengerDescription = 1;</code>
     * @return The passengerDescription.
     */
    com.passkit.grpc.Flights.Barcode.PassengerDescription getPassengerDescription();

    /**
     * <pre>
     * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source checkInSource = 2;</code>
     * @return The enum numeric value on the wire for checkInSource.
     */
    int getCheckInSourceValue();
    /**
     * <pre>
     * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source checkInSource = 2;</code>
     * @return The checkInSource.
     */
    com.passkit.grpc.Flights.Barcode.Source getCheckInSource();

    /**
     * <pre>
     * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
     * @return The enum numeric value on the wire for boardingPassIssuanceSource.
     */
    int getBoardingPassIssuanceSourceValue();
    /**
     * <pre>
     * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
     * @return The boardingPassIssuanceSource.
     */
    com.passkit.grpc.Flights.Barcode.Source getBoardingPassIssuanceSource();

    /**
     * <pre>
     * Date of boarding pass issuance, local to the boarding point.
     * </pre>
     *
     * <code>.io.Date boardingPassIssueDate = 4;</code>
     * @return Whether the boardingPassIssueDate field is set.
     */
    boolean hasBoardingPassIssueDate();
    /**
     * <pre>
     * Date of boarding pass issuance, local to the boarding point.
     * </pre>
     *
     * <code>.io.Date boardingPassIssueDate = 4;</code>
     * @return The boardingPassIssueDate.
     */
    com.passkit.grpc.CommonObjects.Date getBoardingPassIssueDate();
    /**
     * <pre>
     * Date of boarding pass issuance, local to the boarding point.
     * </pre>
     *
     * <code>.io.Date boardingPassIssueDate = 4;</code>
     */
    com.passkit.grpc.CommonObjects.DateOrBuilder getBoardingPassIssueDateOrBuilder();

    /**
     * <pre>
     * Document type that the barcode represents.
     * </pre>
     *
     * <code>.flights.DocType documentType = 5;</code>
     * @return The enum numeric value on the wire for documentType.
     */
    int getDocumentTypeValue();
    /**
     * <pre>
     * Document type that the barcode represents.
     * </pre>
     *
     * <code>.flights.DocType documentType = 5;</code>
     * @return The documentType.
     */
    com.passkit.grpc.Flights.Barcode.DocType getDocumentType();

    /**
     * <pre>
     * IATA or ICAO designator of boarding pass issuer.
     * </pre>
     *
     * <code>string boardingPassIssuer = 6;</code>
     * @return The boardingPassIssuer.
     */
    java.lang.String getBoardingPassIssuer();
    /**
     * <pre>
     * IATA or ICAO designator of boarding pass issuer.
     * </pre>
     *
     * <code>string boardingPassIssuer = 6;</code>
     * @return The bytes for boardingPassIssuer.
     */
    com.google.protobuf.ByteString
        getBoardingPassIssuerBytes();

    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return A list containing the baggageTagNumber.
     */
    java.util.List<java.lang.String>
        getBaggageTagNumberList();
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count of baggageTagNumber.
     */
    int getBaggageTagNumberCount();
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The baggageTagNumber at the given index.
     */
    java.lang.String getBaggageTagNumber(int index);
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the baggageTagNumber at the given index.
     */
    com.google.protobuf.ByteString
        getBaggageTagNumberBytes(int index);

    /**
     * <pre>
     * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
     * </pre>
     *
     * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
     * @return The enum numeric value on the wire for selecteeIndicator.
     */
    int getSelecteeIndicatorValue();
    /**
     * <pre>
     * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
     * </pre>
     *
     * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
     * @return The selecteeIndicator.
     */
    com.passkit.grpc.Flights.Barcode.SelecteeIndicator getSelecteeIndicator();

    /**
     * <pre>
     * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
     * @return The enum numeric value on the wire for internationalDocVerification.
     */
    int getInternationalDocVerificationValue();
    /**
     * <pre>
     * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
     * @return The internationalDocVerification.
     */
    com.passkit.grpc.Flights.Barcode.InternationalDocVerification getInternationalDocVerification();

    /**
     * <pre>
     * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
     * </pre>
     *
     * <code>.flights.IDADIndicator idadIndicator = 10;</code>
     * @return The enum numeric value on the wire for idadIndicator.
     */
    int getIdadIndicatorValue();
    /**
     * <pre>
     * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
     * </pre>
     *
     * <code>.flights.IDADIndicator idadIndicator = 10;</code>
     * @return The idadIndicator.
     */
    com.passkit.grpc.Flights.Barcode.IDADIndicator getIdadIndicator();

    /**
     * <pre>
     * Passenger eligibility for Fast-track privileges.
     * </pre>
     *
     * <code>.flights.FastTrack fastTrack = 11;</code>
     * @return The enum numeric value on the wire for fastTrack.
     */
    int getFastTrackValue();
    /**
     * <pre>
     * Passenger eligibility for Fast-track privileges.
     * </pre>
     *
     * <code>.flights.FastTrack fastTrack = 11;</code>
     * @return The fastTrack.
     */
    com.passkit.grpc.Flights.Barcode.FastTrack getFastTrack();
  }
  /**
   * <pre>
   * Conditional items for the flight segment as described in IATA PSC Resolution 792.  Note: items supplied or derived through other objects (E.g. Frequent Flyer information) are not supplied here.
   * </pre>
   *
   * Protobuf type {@code flights.ConditionalItems}
   */
  public static final class ConditionalItems extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:flights.ConditionalItems)
      ConditionalItemsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ConditionalItems.newBuilder() to construct.
    private ConditionalItems(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ConditionalItems() {
      passengerDescription_ = 0;
      checkInSource_ = 0;
      boardingPassIssuanceSource_ = 0;
      documentType_ = 0;
      boardingPassIssuer_ = "";
      baggageTagNumber_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      selecteeIndicator_ = 0;
      internationalDocVerification_ = 0;
      idadIndicator_ = 0;
      fastTrack_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ConditionalItems();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.passkit.grpc.Flights.Barcode.internal_static_flights_ConditionalItems_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.passkit.grpc.Flights.Barcode.internal_static_flights_ConditionalItems_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.passkit.grpc.Flights.Barcode.ConditionalItems.class, com.passkit.grpc.Flights.Barcode.ConditionalItems.Builder.class);
    }

    private int bitField0_;
    public static final int PASSENGERDESCRIPTION_FIELD_NUMBER = 1;
    private int passengerDescription_ = 0;
    /**
     * <pre>
     * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
     * </pre>
     *
     * <code>.flights.PassengerDescription passengerDescription = 1;</code>
     * @return The enum numeric value on the wire for passengerDescription.
     */
    @java.lang.Override public int getPassengerDescriptionValue() {
      return passengerDescription_;
    }
    /**
     * <pre>
     * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
     * </pre>
     *
     * <code>.flights.PassengerDescription passengerDescription = 1;</code>
     * @return The passengerDescription.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.PassengerDescription getPassengerDescription() {
      com.passkit.grpc.Flights.Barcode.PassengerDescription result = com.passkit.grpc.Flights.Barcode.PassengerDescription.forNumber(passengerDescription_);
      return result == null ? com.passkit.grpc.Flights.Barcode.PassengerDescription.UNRECOGNIZED : result;
    }

    public static final int CHECKINSOURCE_FIELD_NUMBER = 2;
    private int checkInSource_ = 0;
    /**
     * <pre>
     * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source checkInSource = 2;</code>
     * @return The enum numeric value on the wire for checkInSource.
     */
    @java.lang.Override public int getCheckInSourceValue() {
      return checkInSource_;
    }
    /**
     * <pre>
     * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source checkInSource = 2;</code>
     * @return The checkInSource.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.Source getCheckInSource() {
      com.passkit.grpc.Flights.Barcode.Source result = com.passkit.grpc.Flights.Barcode.Source.forNumber(checkInSource_);
      return result == null ? com.passkit.grpc.Flights.Barcode.Source.UNRECOGNIZED : result;
    }

    public static final int BOARDINGPASSISSUANCESOURCE_FIELD_NUMBER = 3;
    private int boardingPassIssuanceSource_ = 0;
    /**
     * <pre>
     * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
     * @return The enum numeric value on the wire for boardingPassIssuanceSource.
     */
    @java.lang.Override public int getBoardingPassIssuanceSourceValue() {
      return boardingPassIssuanceSource_;
    }
    /**
     * <pre>
     * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
     * @return The boardingPassIssuanceSource.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.Source getBoardingPassIssuanceSource() {
      com.passkit.grpc.Flights.Barcode.Source result = com.passkit.grpc.Flights.Barcode.Source.forNumber(boardingPassIssuanceSource_);
      return result == null ? com.passkit.grpc.Flights.Barcode.Source.UNRECOGNIZED : result;
    }

    public static final int BOARDINGPASSISSUEDATE_FIELD_NUMBER = 4;
    private com.passkit.grpc.CommonObjects.Date boardingPassIssueDate_;
    /**
     * <pre>
     * Date of boarding pass issuance, local to the boarding point.
     * </pre>
     *
     * <code>.io.Date boardingPassIssueDate = 4;</code>
     * @return Whether the boardingPassIssueDate field is set.
     */
    @java.lang.Override
    public boolean hasBoardingPassIssueDate() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <pre>
     * Date of boarding pass issuance, local to the boarding point.
     * </pre>
     *
     * <code>.io.Date boardingPassIssueDate = 4;</code>
     * @return The boardingPassIssueDate.
     */
    @java.lang.Override
    public com.passkit.grpc.CommonObjects.Date getBoardingPassIssueDate() {
      return boardingPassIssueDate_ == null ? com.passkit.grpc.CommonObjects.Date.getDefaultInstance() : boardingPassIssueDate_;
    }
    /**
     * <pre>
     * Date of boarding pass issuance, local to the boarding point.
     * </pre>
     *
     * <code>.io.Date boardingPassIssueDate = 4;</code>
     */
    @java.lang.Override
    public com.passkit.grpc.CommonObjects.DateOrBuilder getBoardingPassIssueDateOrBuilder() {
      return boardingPassIssueDate_ == null ? com.passkit.grpc.CommonObjects.Date.getDefaultInstance() : boardingPassIssueDate_;
    }

    public static final int DOCUMENTTYPE_FIELD_NUMBER = 5;
    private int documentType_ = 0;
    /**
     * <pre>
     * Document type that the barcode represents.
     * </pre>
     *
     * <code>.flights.DocType documentType = 5;</code>
     * @return The enum numeric value on the wire for documentType.
     */
    @java.lang.Override public int getDocumentTypeValue() {
      return documentType_;
    }
    /**
     * <pre>
     * Document type that the barcode represents.
     * </pre>
     *
     * <code>.flights.DocType documentType = 5;</code>
     * @return The documentType.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.DocType getDocumentType() {
      com.passkit.grpc.Flights.Barcode.DocType result = com.passkit.grpc.Flights.Barcode.DocType.forNumber(documentType_);
      return result == null ? com.passkit.grpc.Flights.Barcode.DocType.UNRECOGNIZED : result;
    }

    public static final int BOARDINGPASSISSUER_FIELD_NUMBER = 6;
    @SuppressWarnings("serial")
    private volatile java.lang.Object boardingPassIssuer_ = "";
    /**
     * <pre>
     * IATA or ICAO designator of boarding pass issuer.
     * </pre>
     *
     * <code>string boardingPassIssuer = 6;</code>
     * @return The boardingPassIssuer.
     */
    @java.lang.Override
    public java.lang.String getBoardingPassIssuer() {
      java.lang.Object ref = boardingPassIssuer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        boardingPassIssuer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * IATA or ICAO designator of boarding pass issuer.
     * </pre>
     *
     * <code>string boardingPassIssuer = 6;</code>
     * @return The bytes for boardingPassIssuer.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getBoardingPassIssuerBytes() {
      java.lang.Object ref = boardingPassIssuer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        boardingPassIssuer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BAGGAGETAGNUMBER_FIELD_NUMBER = 7;
    @SuppressWarnings("serial")
    private com.google.protobuf.LazyStringArrayList baggageTagNumber_ =
        com.google.protobuf.LazyStringArrayList.emptyList();
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return A list containing the baggageTagNumber.
     */
    public com.google.protobuf.ProtocolStringList
        getBaggageTagNumberList() {
      return baggageTagNumber_;
    }
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @return The count of baggageTagNumber.
     */
    public int getBaggageTagNumberCount() {
      return baggageTagNumber_.size();
    }
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param index The index of the element to return.
     * @return The baggageTagNumber at the given index.
     */
    public java.lang.String getBaggageTagNumber(int index) {
      return baggageTagNumber_.get(index);
    }
    /**
     * <pre>
     * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
     * </pre>
     *
     * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
     * @param index The index of the value to return.
     * @return The bytes of the baggageTagNumber at the given index.
     */
    public com.google.protobuf.ByteString
        getBaggageTagNumberBytes(int index) {
      return baggageTagNumber_.getByteString(index);
    }

    public static final int SELECTEEINDICATOR_FIELD_NUMBER = 8;
    private int selecteeIndicator_ = 0;
    /**
     * <pre>
     * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
     * </pre>
     *
     * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
     * @return The enum numeric value on the wire for selecteeIndicator.
     */
    @java.lang.Override public int getSelecteeIndicatorValue() {
      return selecteeIndicator_;
    }
    /**
     * <pre>
     * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
     * </pre>
     *
     * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
     * @return The selecteeIndicator.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.SelecteeIndicator getSelecteeIndicator() {
      com.passkit.grpc.Flights.Barcode.SelecteeIndicator result = com.passkit.grpc.Flights.Barcode.SelecteeIndicator.forNumber(selecteeIndicator_);
      return result == null ? com.passkit.grpc.Flights.Barcode.SelecteeIndicator.UNRECOGNIZED : result;
    }

    public static final int INTERNATIONALDOCVERIFICATION_FIELD_NUMBER = 9;
    private int internationalDocVerification_ = 0;
    /**
     * <pre>
     * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
     * @return The enum numeric value on the wire for internationalDocVerification.
     */
    @java.lang.Override public int getInternationalDocVerificationValue() {
      return internationalDocVerification_;
    }
    /**
     * <pre>
     * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
     * </pre>
     *
     * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
     * @return The internationalDocVerification.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.InternationalDocVerification getInternationalDocVerification() {
      com.passkit.grpc.Flights.Barcode.InternationalDocVerification result = com.passkit.grpc.Flights.Barcode.InternationalDocVerification.forNumber(internationalDocVerification_);
      return result == null ? com.passkit.grpc.Flights.Barcode.InternationalDocVerification.UNRECOGNIZED : result;
    }

    public static final int IDADINDICATOR_FIELD_NUMBER = 10;
    private int idadIndicator_ = 0;
    /**
     * <pre>
     * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
     * </pre>
     *
     * <code>.flights.IDADIndicator idadIndicator = 10;</code>
     * @return The enum numeric value on the wire for idadIndicator.
     */
    @java.lang.Override public int getIdadIndicatorValue() {
      return idadIndicator_;
    }
    /**
     * <pre>
     * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
     * </pre>
     *
     * <code>.flights.IDADIndicator idadIndicator = 10;</code>
     * @return The idadIndicator.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.IDADIndicator getIdadIndicator() {
      com.passkit.grpc.Flights.Barcode.IDADIndicator result = com.passkit.grpc.Flights.Barcode.IDADIndicator.forNumber(idadIndicator_);
      return result == null ? com.passkit.grpc.Flights.Barcode.IDADIndicator.UNRECOGNIZED : result;
    }

    public static final int FASTTRACK_FIELD_NUMBER = 11;
    private int fastTrack_ = 0;
    /**
     * <pre>
     * Passenger eligibility for Fast-track privileges.
     * </pre>
     *
     * <code>.flights.FastTrack fastTrack = 11;</code>
     * @return The enum numeric value on the wire for fastTrack.
     */
    @java.lang.Override public int getFastTrackValue() {
      return fastTrack_;
    }
    /**
     * <pre>
     * Passenger eligibility for Fast-track privileges.
     * </pre>
     *
     * <code>.flights.FastTrack fastTrack = 11;</code>
     * @return The fastTrack.
     */
    @java.lang.Override public com.passkit.grpc.Flights.Barcode.FastTrack getFastTrack() {
      com.passkit.grpc.Flights.Barcode.FastTrack result = com.passkit.grpc.Flights.Barcode.FastTrack.forNumber(fastTrack_);
      return result == null ? com.passkit.grpc.Flights.Barcode.FastTrack.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (passengerDescription_ != com.passkit.grpc.Flights.Barcode.PassengerDescription.ADULT.getNumber()) {
        output.writeEnum(1, passengerDescription_);
      }
      if (checkInSource_ != com.passkit.grpc.Flights.Barcode.Source.W.getNumber()) {
        output.writeEnum(2, checkInSource_);
      }
      if (boardingPassIssuanceSource_ != com.passkit.grpc.Flights.Barcode.Source.W.getNumber()) {
        output.writeEnum(3, boardingPassIssuanceSource_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(4, getBoardingPassIssueDate());
      }
      if (documentType_ != com.passkit.grpc.Flights.Barcode.DocType.B.getNumber()) {
        output.writeEnum(5, documentType_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(boardingPassIssuer_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, boardingPassIssuer_);
      }
      for (int i = 0; i < baggageTagNumber_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, baggageTagNumber_.getRaw(i));
      }
      if (selecteeIndicator_ != com.passkit.grpc.Flights.Barcode.SelecteeIndicator.NOT_SELECTEE.getNumber()) {
        output.writeEnum(8, selecteeIndicator_);
      }
      if (internationalDocVerification_ != com.passkit.grpc.Flights.Barcode.InternationalDocVerification.NOT_REQUIRED.getNumber()) {
        output.writeEnum(9, internationalDocVerification_);
      }
      if (idadIndicator_ != com.passkit.grpc.Flights.Barcode.IDADIndicator.NONE.getNumber()) {
        output.writeEnum(10, idadIndicator_);
      }
      if (fastTrack_ != com.passkit.grpc.Flights.Barcode.FastTrack.N.getNumber()) {
        output.writeEnum(11, fastTrack_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (passengerDescription_ != com.passkit.grpc.Flights.Barcode.PassengerDescription.ADULT.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, passengerDescription_);
      }
      if (checkInSource_ != com.passkit.grpc.Flights.Barcode.Source.W.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, checkInSource_);
      }
      if (boardingPassIssuanceSource_ != com.passkit.grpc.Flights.Barcode.Source.W.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, boardingPassIssuanceSource_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getBoardingPassIssueDate());
      }
      if (documentType_ != com.passkit.grpc.Flights.Barcode.DocType.B.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, documentType_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(boardingPassIssuer_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, boardingPassIssuer_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < baggageTagNumber_.size(); i++) {
          dataSize += computeStringSizeNoTag(baggageTagNumber_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getBaggageTagNumberList().size();
      }
      if (selecteeIndicator_ != com.passkit.grpc.Flights.Barcode.SelecteeIndicator.NOT_SELECTEE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(8, selecteeIndicator_);
      }
      if (internationalDocVerification_ != com.passkit.grpc.Flights.Barcode.InternationalDocVerification.NOT_REQUIRED.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(9, internationalDocVerification_);
      }
      if (idadIndicator_ != com.passkit.grpc.Flights.Barcode.IDADIndicator.NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(10, idadIndicator_);
      }
      if (fastTrack_ != com.passkit.grpc.Flights.Barcode.FastTrack.N.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(11, fastTrack_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.passkit.grpc.Flights.Barcode.ConditionalItems)) {
        return super.equals(obj);
      }
      com.passkit.grpc.Flights.Barcode.ConditionalItems other = (com.passkit.grpc.Flights.Barcode.ConditionalItems) obj;

      if (passengerDescription_ != other.passengerDescription_) return false;
      if (checkInSource_ != other.checkInSource_) return false;
      if (boardingPassIssuanceSource_ != other.boardingPassIssuanceSource_) return false;
      if (hasBoardingPassIssueDate() != other.hasBoardingPassIssueDate()) return false;
      if (hasBoardingPassIssueDate()) {
        if (!getBoardingPassIssueDate()
            .equals(other.getBoardingPassIssueDate())) return false;
      }
      if (documentType_ != other.documentType_) return false;
      if (!getBoardingPassIssuer()
          .equals(other.getBoardingPassIssuer())) return false;
      if (!getBaggageTagNumberList()
          .equals(other.getBaggageTagNumberList())) return false;
      if (selecteeIndicator_ != other.selecteeIndicator_) return false;
      if (internationalDocVerification_ != other.internationalDocVerification_) return false;
      if (idadIndicator_ != other.idadIndicator_) return false;
      if (fastTrack_ != other.fastTrack_) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + PASSENGERDESCRIPTION_FIELD_NUMBER;
      hash = (53 * hash) + passengerDescription_;
      hash = (37 * hash) + CHECKINSOURCE_FIELD_NUMBER;
      hash = (53 * hash) + checkInSource_;
      hash = (37 * hash) + BOARDINGPASSISSUANCESOURCE_FIELD_NUMBER;
      hash = (53 * hash) + boardingPassIssuanceSource_;
      if (hasBoardingPassIssueDate()) {
        hash = (37 * hash) + BOARDINGPASSISSUEDATE_FIELD_NUMBER;
        hash = (53 * hash) + getBoardingPassIssueDate().hashCode();
      }
      hash = (37 * hash) + DOCUMENTTYPE_FIELD_NUMBER;
      hash = (53 * hash) + documentType_;
      hash = (37 * hash) + BOARDINGPASSISSUER_FIELD_NUMBER;
      hash = (53 * hash) + getBoardingPassIssuer().hashCode();
      if (getBaggageTagNumberCount() > 0) {
        hash = (37 * hash) + BAGGAGETAGNUMBER_FIELD_NUMBER;
        hash = (53 * hash) + getBaggageTagNumberList().hashCode();
      }
      hash = (37 * hash) + SELECTEEINDICATOR_FIELD_NUMBER;
      hash = (53 * hash) + selecteeIndicator_;
      hash = (37 * hash) + INTERNATIONALDOCVERIFICATION_FIELD_NUMBER;
      hash = (53 * hash) + internationalDocVerification_;
      hash = (37 * hash) + IDADINDICATOR_FIELD_NUMBER;
      hash = (53 * hash) + idadIndicator_;
      hash = (37 * hash) + FASTTRACK_FIELD_NUMBER;
      hash = (53 * hash) + fastTrack_;
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.passkit.grpc.Flights.Barcode.ConditionalItems parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.passkit.grpc.Flights.Barcode.ConditionalItems prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Conditional items for the flight segment as described in IATA PSC Resolution 792.  Note: items supplied or derived through other objects (E.g. Frequent Flyer information) are not supplied here.
     * </pre>
     *
     * Protobuf type {@code flights.ConditionalItems}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:flights.ConditionalItems)
        com.passkit.grpc.Flights.Barcode.ConditionalItemsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.passkit.grpc.Flights.Barcode.internal_static_flights_ConditionalItems_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.passkit.grpc.Flights.Barcode.internal_static_flights_ConditionalItems_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.passkit.grpc.Flights.Barcode.ConditionalItems.class, com.passkit.grpc.Flights.Barcode.ConditionalItems.Builder.class);
      }

      // Construct using com.passkit.grpc.Flights.Barcode.ConditionalItems.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getBoardingPassIssueDateFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        passengerDescription_ = 0;
        checkInSource_ = 0;
        boardingPassIssuanceSource_ = 0;
        boardingPassIssueDate_ = null;
        if (boardingPassIssueDateBuilder_ != null) {
          boardingPassIssueDateBuilder_.dispose();
          boardingPassIssueDateBuilder_ = null;
        }
        documentType_ = 0;
        boardingPassIssuer_ = "";
        baggageTagNumber_ =
            com.google.protobuf.LazyStringArrayList.emptyList();
        selecteeIndicator_ = 0;
        internationalDocVerification_ = 0;
        idadIndicator_ = 0;
        fastTrack_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.passkit.grpc.Flights.Barcode.internal_static_flights_ConditionalItems_descriptor;
      }

      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.ConditionalItems getDefaultInstanceForType() {
        return com.passkit.grpc.Flights.Barcode.ConditionalItems.getDefaultInstance();
      }

      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.ConditionalItems build() {
        com.passkit.grpc.Flights.Barcode.ConditionalItems result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.ConditionalItems buildPartial() {
        com.passkit.grpc.Flights.Barcode.ConditionalItems result = new com.passkit.grpc.Flights.Barcode.ConditionalItems(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.passkit.grpc.Flights.Barcode.ConditionalItems result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.passengerDescription_ = passengerDescription_;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.checkInSource_ = checkInSource_;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.boardingPassIssuanceSource_ = boardingPassIssuanceSource_;
        }
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.boardingPassIssueDate_ = boardingPassIssueDateBuilder_ == null
              ? boardingPassIssueDate_
              : boardingPassIssueDateBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.documentType_ = documentType_;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.boardingPassIssuer_ = boardingPassIssuer_;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          baggageTagNumber_.makeImmutable();
          result.baggageTagNumber_ = baggageTagNumber_;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.selecteeIndicator_ = selecteeIndicator_;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.internationalDocVerification_ = internationalDocVerification_;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.idadIndicator_ = idadIndicator_;
        }
        if (((from_bitField0_ & 0x00000400) != 0)) {
          result.fastTrack_ = fastTrack_;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.passkit.grpc.Flights.Barcode.ConditionalItems) {
          return mergeFrom((com.passkit.grpc.Flights.Barcode.ConditionalItems)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.passkit.grpc.Flights.Barcode.ConditionalItems other) {
        if (other == com.passkit.grpc.Flights.Barcode.ConditionalItems.getDefaultInstance()) return this;
        if (other.passengerDescription_ != 0) {
          setPassengerDescriptionValue(other.getPassengerDescriptionValue());
        }
        if (other.checkInSource_ != 0) {
          setCheckInSourceValue(other.getCheckInSourceValue());
        }
        if (other.boardingPassIssuanceSource_ != 0) {
          setBoardingPassIssuanceSourceValue(other.getBoardingPassIssuanceSourceValue());
        }
        if (other.hasBoardingPassIssueDate()) {
          mergeBoardingPassIssueDate(other.getBoardingPassIssueDate());
        }
        if (other.documentType_ != 0) {
          setDocumentTypeValue(other.getDocumentTypeValue());
        }
        if (!other.getBoardingPassIssuer().isEmpty()) {
          boardingPassIssuer_ = other.boardingPassIssuer_;
          bitField0_ |= 0x00000020;
          onChanged();
        }
        if (!other.baggageTagNumber_.isEmpty()) {
          if (baggageTagNumber_.isEmpty()) {
            baggageTagNumber_ = other.baggageTagNumber_;
            bitField0_ |= 0x00000040;
          } else {
            ensureBaggageTagNumberIsMutable();
            baggageTagNumber_.addAll(other.baggageTagNumber_);
          }
          onChanged();
        }
        if (other.selecteeIndicator_ != 0) {
          setSelecteeIndicatorValue(other.getSelecteeIndicatorValue());
        }
        if (other.internationalDocVerification_ != 0) {
          setInternationalDocVerificationValue(other.getInternationalDocVerificationValue());
        }
        if (other.idadIndicator_ != 0) {
          setIdadIndicatorValue(other.getIdadIndicatorValue());
        }
        if (other.fastTrack_ != 0) {
          setFastTrackValue(other.getFastTrackValue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                passengerDescription_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 16: {
                checkInSource_ = input.readEnum();
                bitField0_ |= 0x00000002;
                break;
              } // case 16
              case 24: {
                boardingPassIssuanceSource_ = input.readEnum();
                bitField0_ |= 0x00000004;
                break;
              } // case 24
              case 34: {
                input.readMessage(
                    getBoardingPassIssueDateFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000008;
                break;
              } // case 34
              case 40: {
                documentType_ = input.readEnum();
                bitField0_ |= 0x00000010;
                break;
              } // case 40
              case 50: {
                boardingPassIssuer_ = input.readStringRequireUtf8();
                bitField0_ |= 0x00000020;
                break;
              } // case 50
              case 58: {
                java.lang.String s = input.readStringRequireUtf8();
                ensureBaggageTagNumberIsMutable();
                baggageTagNumber_.add(s);
                break;
              } // case 58
              case 64: {
                selecteeIndicator_ = input.readEnum();
                bitField0_ |= 0x00000080;
                break;
              } // case 64
              case 72: {
                internationalDocVerification_ = input.readEnum();
                bitField0_ |= 0x00000100;
                break;
              } // case 72
              case 80: {
                idadIndicator_ = input.readEnum();
                bitField0_ |= 0x00000200;
                break;
              } // case 80
              case 88: {
                fastTrack_ = input.readEnum();
                bitField0_ |= 0x00000400;
                break;
              } // case 88
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int passengerDescription_ = 0;
      /**
       * <pre>
       * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
       * </pre>
       *
       * <code>.flights.PassengerDescription passengerDescription = 1;</code>
       * @return The enum numeric value on the wire for passengerDescription.
       */
      @java.lang.Override public int getPassengerDescriptionValue() {
        return passengerDescription_;
      }
      /**
       * <pre>
       * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
       * </pre>
       *
       * <code>.flights.PassengerDescription passengerDescription = 1;</code>
       * @param value The enum numeric value on the wire for passengerDescription to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerDescriptionValue(int value) {
        passengerDescription_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
       * </pre>
       *
       * <code>.flights.PassengerDescription passengerDescription = 1;</code>
       * @return The passengerDescription.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.PassengerDescription getPassengerDescription() {
        com.passkit.grpc.Flights.Barcode.PassengerDescription result = com.passkit.grpc.Flights.Barcode.PassengerDescription.forNumber(passengerDescription_);
        return result == null ? com.passkit.grpc.Flights.Barcode.PassengerDescription.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
       * </pre>
       *
       * <code>.flights.PassengerDescription passengerDescription = 1;</code>
       * @param value The passengerDescription to set.
       * @return This builder for chaining.
       */
      public Builder setPassengerDescription(com.passkit.grpc.Flights.Barcode.PassengerDescription value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        passengerDescription_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Passenger Status as detailed in IATA PSC Resolution 792 Attachment 'C'. Note: all values other than 0 indicate that the passenger has checked in.
       * </pre>
       *
       * <code>.flights.PassengerDescription passengerDescription = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearPassengerDescription() {
        bitField0_ = (bitField0_ & ~0x00000001);
        passengerDescription_ = 0;
        onChanged();
        return this;
      }

      private int checkInSource_ = 0;
      /**
       * <pre>
       * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source checkInSource = 2;</code>
       * @return The enum numeric value on the wire for checkInSource.
       */
      @java.lang.Override public int getCheckInSourceValue() {
        return checkInSource_;
      }
      /**
       * <pre>
       * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source checkInSource = 2;</code>
       * @param value The enum numeric value on the wire for checkInSource to set.
       * @return This builder for chaining.
       */
      public Builder setCheckInSourceValue(int value) {
        checkInSource_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source checkInSource = 2;</code>
       * @return The checkInSource.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.Source getCheckInSource() {
        com.passkit.grpc.Flights.Barcode.Source result = com.passkit.grpc.Flights.Barcode.Source.forNumber(checkInSource_);
        return result == null ? com.passkit.grpc.Flights.Barcode.Source.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source checkInSource = 2;</code>
       * @param value The checkInSource to set.
       * @return This builder for chaining.
       */
      public Builder setCheckInSource(com.passkit.grpc.Flights.Barcode.Source value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        checkInSource_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Source of checkin as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source checkInSource = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearCheckInSource() {
        bitField0_ = (bitField0_ & ~0x00000002);
        checkInSource_ = 0;
        onChanged();
        return this;
      }

      private int boardingPassIssuanceSource_ = 0;
      /**
       * <pre>
       * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
       * @return The enum numeric value on the wire for boardingPassIssuanceSource.
       */
      @java.lang.Override public int getBoardingPassIssuanceSourceValue() {
        return boardingPassIssuanceSource_;
      }
      /**
       * <pre>
       * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
       * @param value The enum numeric value on the wire for boardingPassIssuanceSource to set.
       * @return This builder for chaining.
       */
      public Builder setBoardingPassIssuanceSourceValue(int value) {
        boardingPassIssuanceSource_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
       * @return The boardingPassIssuanceSource.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.Source getBoardingPassIssuanceSource() {
        com.passkit.grpc.Flights.Barcode.Source result = com.passkit.grpc.Flights.Barcode.Source.forNumber(boardingPassIssuanceSource_);
        return result == null ? com.passkit.grpc.Flights.Barcode.Source.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
       * @param value The boardingPassIssuanceSource to set.
       * @return This builder for chaining.
       */
      public Builder setBoardingPassIssuanceSource(com.passkit.grpc.Flights.Barcode.Source value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000004;
        boardingPassIssuanceSource_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Source of boarding pass issuance as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.Source boardingPassIssuanceSource = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoardingPassIssuanceSource() {
        bitField0_ = (bitField0_ & ~0x00000004);
        boardingPassIssuanceSource_ = 0;
        onChanged();
        return this;
      }

      private com.passkit.grpc.CommonObjects.Date boardingPassIssueDate_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.passkit.grpc.CommonObjects.Date, com.passkit.grpc.CommonObjects.Date.Builder, com.passkit.grpc.CommonObjects.DateOrBuilder> boardingPassIssueDateBuilder_;
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       * @return Whether the boardingPassIssueDate field is set.
       */
      public boolean hasBoardingPassIssueDate() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       * @return The boardingPassIssueDate.
       */
      public com.passkit.grpc.CommonObjects.Date getBoardingPassIssueDate() {
        if (boardingPassIssueDateBuilder_ == null) {
          return boardingPassIssueDate_ == null ? com.passkit.grpc.CommonObjects.Date.getDefaultInstance() : boardingPassIssueDate_;
        } else {
          return boardingPassIssueDateBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      public Builder setBoardingPassIssueDate(com.passkit.grpc.CommonObjects.Date value) {
        if (boardingPassIssueDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          boardingPassIssueDate_ = value;
        } else {
          boardingPassIssueDateBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      public Builder setBoardingPassIssueDate(
          com.passkit.grpc.CommonObjects.Date.Builder builderForValue) {
        if (boardingPassIssueDateBuilder_ == null) {
          boardingPassIssueDate_ = builderForValue.build();
        } else {
          boardingPassIssueDateBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      public Builder mergeBoardingPassIssueDate(com.passkit.grpc.CommonObjects.Date value) {
        if (boardingPassIssueDateBuilder_ == null) {
          if (((bitField0_ & 0x00000008) != 0) &&
            boardingPassIssueDate_ != null &&
            boardingPassIssueDate_ != com.passkit.grpc.CommonObjects.Date.getDefaultInstance()) {
            getBoardingPassIssueDateBuilder().mergeFrom(value);
          } else {
            boardingPassIssueDate_ = value;
          }
        } else {
          boardingPassIssueDateBuilder_.mergeFrom(value);
        }
        if (boardingPassIssueDate_ != null) {
          bitField0_ |= 0x00000008;
          onChanged();
        }
        return this;
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      public Builder clearBoardingPassIssueDate() {
        bitField0_ = (bitField0_ & ~0x00000008);
        boardingPassIssueDate_ = null;
        if (boardingPassIssueDateBuilder_ != null) {
          boardingPassIssueDateBuilder_.dispose();
          boardingPassIssueDateBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      public com.passkit.grpc.CommonObjects.Date.Builder getBoardingPassIssueDateBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getBoardingPassIssueDateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      public com.passkit.grpc.CommonObjects.DateOrBuilder getBoardingPassIssueDateOrBuilder() {
        if (boardingPassIssueDateBuilder_ != null) {
          return boardingPassIssueDateBuilder_.getMessageOrBuilder();
        } else {
          return boardingPassIssueDate_ == null ?
              com.passkit.grpc.CommonObjects.Date.getDefaultInstance() : boardingPassIssueDate_;
        }
      }
      /**
       * <pre>
       * Date of boarding pass issuance, local to the boarding point.
       * </pre>
       *
       * <code>.io.Date boardingPassIssueDate = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.passkit.grpc.CommonObjects.Date, com.passkit.grpc.CommonObjects.Date.Builder, com.passkit.grpc.CommonObjects.DateOrBuilder> 
          getBoardingPassIssueDateFieldBuilder() {
        if (boardingPassIssueDateBuilder_ == null) {
          boardingPassIssueDateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.passkit.grpc.CommonObjects.Date, com.passkit.grpc.CommonObjects.Date.Builder, com.passkit.grpc.CommonObjects.DateOrBuilder>(
                  getBoardingPassIssueDate(),
                  getParentForChildren(),
                  isClean());
          boardingPassIssueDate_ = null;
        }
        return boardingPassIssueDateBuilder_;
      }

      private int documentType_ = 0;
      /**
       * <pre>
       * Document type that the barcode represents.
       * </pre>
       *
       * <code>.flights.DocType documentType = 5;</code>
       * @return The enum numeric value on the wire for documentType.
       */
      @java.lang.Override public int getDocumentTypeValue() {
        return documentType_;
      }
      /**
       * <pre>
       * Document type that the barcode represents.
       * </pre>
       *
       * <code>.flights.DocType documentType = 5;</code>
       * @param value The enum numeric value on the wire for documentType to set.
       * @return This builder for chaining.
       */
      public Builder setDocumentTypeValue(int value) {
        documentType_ = value;
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Document type that the barcode represents.
       * </pre>
       *
       * <code>.flights.DocType documentType = 5;</code>
       * @return The documentType.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.DocType getDocumentType() {
        com.passkit.grpc.Flights.Barcode.DocType result = com.passkit.grpc.Flights.Barcode.DocType.forNumber(documentType_);
        return result == null ? com.passkit.grpc.Flights.Barcode.DocType.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Document type that the barcode represents.
       * </pre>
       *
       * <code>.flights.DocType documentType = 5;</code>
       * @param value The documentType to set.
       * @return This builder for chaining.
       */
      public Builder setDocumentType(com.passkit.grpc.Flights.Barcode.DocType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        documentType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Document type that the barcode represents.
       * </pre>
       *
       * <code>.flights.DocType documentType = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearDocumentType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        documentType_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object boardingPassIssuer_ = "";
      /**
       * <pre>
       * IATA or ICAO designator of boarding pass issuer.
       * </pre>
       *
       * <code>string boardingPassIssuer = 6;</code>
       * @return The boardingPassIssuer.
       */
      public java.lang.String getBoardingPassIssuer() {
        java.lang.Object ref = boardingPassIssuer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          boardingPassIssuer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * IATA or ICAO designator of boarding pass issuer.
       * </pre>
       *
       * <code>string boardingPassIssuer = 6;</code>
       * @return The bytes for boardingPassIssuer.
       */
      public com.google.protobuf.ByteString
          getBoardingPassIssuerBytes() {
        java.lang.Object ref = boardingPassIssuer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          boardingPassIssuer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * IATA or ICAO designator of boarding pass issuer.
       * </pre>
       *
       * <code>string boardingPassIssuer = 6;</code>
       * @param value The boardingPassIssuer to set.
       * @return This builder for chaining.
       */
      public Builder setBoardingPassIssuer(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        boardingPassIssuer_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IATA or ICAO designator of boarding pass issuer.
       * </pre>
       *
       * <code>string boardingPassIssuer = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBoardingPassIssuer() {
        boardingPassIssuer_ = getDefaultInstance().getBoardingPassIssuer();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * IATA or ICAO designator of boarding pass issuer.
       * </pre>
       *
       * <code>string boardingPassIssuer = 6;</code>
       * @param value The bytes for boardingPassIssuer to set.
       * @return This builder for chaining.
       */
      public Builder setBoardingPassIssuerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        boardingPassIssuer_ = value;
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringArrayList baggageTagNumber_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
      private void ensureBaggageTagNumberIsMutable() {
        if (!baggageTagNumber_.isModifiable()) {
          baggageTagNumber_ = new com.google.protobuf.LazyStringArrayList(baggageTagNumber_);
        }
        bitField0_ |= 0x00000040;
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return A list containing the baggageTagNumber.
       */
      public com.google.protobuf.ProtocolStringList
          getBaggageTagNumberList() {
        baggageTagNumber_.makeImmutable();
        return baggageTagNumber_;
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return The count of baggageTagNumber.
       */
      public int getBaggageTagNumberCount() {
        return baggageTagNumber_.size();
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param index The index of the element to return.
       * @return The baggageTagNumber at the given index.
       */
      public java.lang.String getBaggageTagNumber(int index) {
        return baggageTagNumber_.get(index);
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param index The index of the value to return.
       * @return The bytes of the baggageTagNumber at the given index.
       */
      public com.google.protobuf.ByteString
          getBaggageTagNumberBytes(int index) {
        return baggageTagNumber_.getByteString(index);
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param index The index to set the value at.
       * @param value The baggageTagNumber to set.
       * @return This builder for chaining.
       */
      public Builder setBaggageTagNumber(
          int index, java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureBaggageTagNumberIsMutable();
        baggageTagNumber_.set(index, value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The baggageTagNumber to add.
       * @return This builder for chaining.
       */
      public Builder addBaggageTagNumber(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        ensureBaggageTagNumberIsMutable();
        baggageTagNumber_.add(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param values The baggageTagNumber to add.
       * @return This builder for chaining.
       */
      public Builder addAllBaggageTagNumber(
          java.lang.Iterable<java.lang.String> values) {
        ensureBaggageTagNumberIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, baggageTagNumber_);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @return This builder for chaining.
       */
      public Builder clearBaggageTagNumber() {
        baggageTagNumber_ =
          com.google.protobuf.LazyStringArrayList.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * This field allows carriers to populate baggage tag numbers and the number of consecutive bags. It contains 13 characters corresponding to the 10 digit bag tag number, as per IATA BCM specifications, Resolution 740 and 3 digits identifying the number of consecutive tags.&#92;n1: leading digit – 0 for interline tag, 1 for fall-back tag, 2 for interline rush tag.&#92;n2-4: carrier numeric code.&#92;n5-10: carrier initial tag number (leading zeros).&#92;n11-13: number of consecutive tags (allows for up to 999 tags).&#92;nUp to 2 additional, non-consecutive tags can be added.
       * </pre>
       *
       * <code>repeated string baggageTagNumber = 7 [(.grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = { ... }</code>
       * @param value The bytes of the baggageTagNumber to add.
       * @return This builder for chaining.
       */
      public Builder addBaggageTagNumberBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        checkByteStringIsUtf8(value);
        ensureBaggageTagNumberIsMutable();
        baggageTagNumber_.add(value);
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private int selecteeIndicator_ = 0;
      /**
       * <pre>
       * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
       * </pre>
       *
       * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
       * @return The enum numeric value on the wire for selecteeIndicator.
       */
      @java.lang.Override public int getSelecteeIndicatorValue() {
        return selecteeIndicator_;
      }
      /**
       * <pre>
       * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
       * </pre>
       *
       * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
       * @param value The enum numeric value on the wire for selecteeIndicator to set.
       * @return This builder for chaining.
       */
      public Builder setSelecteeIndicatorValue(int value) {
        selecteeIndicator_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
       * </pre>
       *
       * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
       * @return The selecteeIndicator.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.SelecteeIndicator getSelecteeIndicator() {
        com.passkit.grpc.Flights.Barcode.SelecteeIndicator result = com.passkit.grpc.Flights.Barcode.SelecteeIndicator.forNumber(selecteeIndicator_);
        return result == null ? com.passkit.grpc.Flights.Barcode.SelecteeIndicator.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
       * </pre>
       *
       * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
       * @param value The selecteeIndicator to set.
       * @return This builder for chaining.
       */
      public Builder setSelecteeIndicator(com.passkit.grpc.Flights.Barcode.SelecteeIndicator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000080;
        selecteeIndicator_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Passenger security status. Note: in practical terms, this is always likely to be NOT_SELECTEE or TSA_PRECHECK since current DHS Pre-Departure Regulations only allow on-site printing of boarding passes. It is mandatory when US travel is involved.
       * </pre>
       *
       * <code>.flights.SelecteeIndicator selecteeIndicator = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearSelecteeIndicator() {
        bitField0_ = (bitField0_ & ~0x00000080);
        selecteeIndicator_ = 0;
        onChanged();
        return this;
      }

      private int internationalDocVerification_ = 0;
      /**
       * <pre>
       * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
       * @return The enum numeric value on the wire for internationalDocVerification.
       */
      @java.lang.Override public int getInternationalDocVerificationValue() {
        return internationalDocVerification_;
      }
      /**
       * <pre>
       * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
       * @param value The enum numeric value on the wire for internationalDocVerification to set.
       * @return This builder for chaining.
       */
      public Builder setInternationalDocVerificationValue(int value) {
        internationalDocVerification_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
       * @return The internationalDocVerification.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.InternationalDocVerification getInternationalDocVerification() {
        com.passkit.grpc.Flights.Barcode.InternationalDocVerification result = com.passkit.grpc.Flights.Barcode.InternationalDocVerification.forNumber(internationalDocVerification_);
        return result == null ? com.passkit.grpc.Flights.Barcode.InternationalDocVerification.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
       * @param value The internationalDocVerification to set.
       * @return This builder for chaining.
       */
      public Builder setInternationalDocVerification(com.passkit.grpc.Flights.Barcode.InternationalDocVerification value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000100;
        internationalDocVerification_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * International Documentation Verification status as detailed in IATA PSC Resolution 792 Attachment 'C'.
       * </pre>
       *
       * <code>.flights.InternationalDocVerification internationalDocVerification = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearInternationalDocVerification() {
        bitField0_ = (bitField0_ & ~0x00000100);
        internationalDocVerification_ = 0;
        onChanged();
        return this;
      }

      private int idadIndicator_ = 0;
      /**
       * <pre>
       * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
       * </pre>
       *
       * <code>.flights.IDADIndicator idadIndicator = 10;</code>
       * @return The enum numeric value on the wire for idadIndicator.
       */
      @java.lang.Override public int getIdadIndicatorValue() {
        return idadIndicator_;
      }
      /**
       * <pre>
       * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
       * </pre>
       *
       * <code>.flights.IDADIndicator idadIndicator = 10;</code>
       * @param value The enum numeric value on the wire for idadIndicator to set.
       * @return This builder for chaining.
       */
      public Builder setIdadIndicatorValue(int value) {
        idadIndicator_ = value;
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
       * </pre>
       *
       * <code>.flights.IDADIndicator idadIndicator = 10;</code>
       * @return The idadIndicator.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.IDADIndicator getIdadIndicator() {
        com.passkit.grpc.Flights.Barcode.IDADIndicator result = com.passkit.grpc.Flights.Barcode.IDADIndicator.forNumber(idadIndicator_);
        return result == null ? com.passkit.grpc.Flights.Barcode.IDADIndicator.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
       * </pre>
       *
       * <code>.flights.IDADIndicator idadIndicator = 10;</code>
       * @param value The idadIndicator to set.
       * @return This builder for chaining.
       */
      public Builder setIdadIndicator(com.passkit.grpc.Flights.Barcode.IDADIndicator value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000200;
        idadIndicator_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Industry Discount / Airline Discount codes. See IATA Recommended Practice 1788.
       * </pre>
       *
       * <code>.flights.IDADIndicator idadIndicator = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdadIndicator() {
        bitField0_ = (bitField0_ & ~0x00000200);
        idadIndicator_ = 0;
        onChanged();
        return this;
      }

      private int fastTrack_ = 0;
      /**
       * <pre>
       * Passenger eligibility for Fast-track privileges.
       * </pre>
       *
       * <code>.flights.FastTrack fastTrack = 11;</code>
       * @return The enum numeric value on the wire for fastTrack.
       */
      @java.lang.Override public int getFastTrackValue() {
        return fastTrack_;
      }
      /**
       * <pre>
       * Passenger eligibility for Fast-track privileges.
       * </pre>
       *
       * <code>.flights.FastTrack fastTrack = 11;</code>
       * @param value The enum numeric value on the wire for fastTrack to set.
       * @return This builder for chaining.
       */
      public Builder setFastTrackValue(int value) {
        fastTrack_ = value;
        bitField0_ |= 0x00000400;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Passenger eligibility for Fast-track privileges.
       * </pre>
       *
       * <code>.flights.FastTrack fastTrack = 11;</code>
       * @return The fastTrack.
       */
      @java.lang.Override
      public com.passkit.grpc.Flights.Barcode.FastTrack getFastTrack() {
        com.passkit.grpc.Flights.Barcode.FastTrack result = com.passkit.grpc.Flights.Barcode.FastTrack.forNumber(fastTrack_);
        return result == null ? com.passkit.grpc.Flights.Barcode.FastTrack.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * Passenger eligibility for Fast-track privileges.
       * </pre>
       *
       * <code>.flights.FastTrack fastTrack = 11;</code>
       * @param value The fastTrack to set.
       * @return This builder for chaining.
       */
      public Builder setFastTrack(com.passkit.grpc.Flights.Barcode.FastTrack value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000400;
        fastTrack_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Passenger eligibility for Fast-track privileges.
       * </pre>
       *
       * <code>.flights.FastTrack fastTrack = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearFastTrack() {
        bitField0_ = (bitField0_ & ~0x00000400);
        fastTrack_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:flights.ConditionalItems)
    }

    // @@protoc_insertion_point(class_scope:flights.ConditionalItems)
    private static final com.passkit.grpc.Flights.Barcode.ConditionalItems DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.passkit.grpc.Flights.Barcode.ConditionalItems();
    }

    public static com.passkit.grpc.Flights.Barcode.ConditionalItems getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ConditionalItems>
        PARSER = new com.google.protobuf.AbstractParser<ConditionalItems>() {
      @java.lang.Override
      public ConditionalItems parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ConditionalItems> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ConditionalItems> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.passkit.grpc.Flights.Barcode.ConditionalItems getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_flights_ConditionalItems_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_flights_ConditionalItems_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030io/flights/barcode.proto\022\007flights\032\036io/" +
      "common/common_objects.proto\032.protoc-gen-" +
      "openapiv2/options/annotations.proto\"\302\010\n\020" +
      "ConditionalItems\022;\n\024passengerDescription" +
      "\030\001 \001(\0162\035.flights.PassengerDescription\022&\n" +
      "\rcheckInSource\030\002 \001(\0162\017.flights.Source\0223\n" +
      "\032boardingPassIssuanceSource\030\003 \001(\0162\017.flig" +
      "hts.Source\022\'\n\025boardingPassIssueDate\030\004 \001(" +
      "\0132\010.io.Date\022&\n\014documentType\030\005 \001(\0162\020.flig" +
      "hts.DocType\022\032\n\022boardingPassIssuer\030\006 \001(\t\022" +
      "\314\004\n\020baggageTagNumber\030\007 \003(\tB\261\004\222A\255\0042\252\004This" +
      " field allows carriers to populate bagga" +
      "ge tag numbers and the number of consecu" +
      "tive bags. It contains 13 characters cor" +
      "responding to the 10 digit bag tag numbe" +
      "r, as per IATA BCM specifications, Resol" +
      "ution 740 and 3 digits identifying the n" +
      "umber of consecutive tags.\n1: leading di" +
      "git \342\200\223 0 for interline tag, 1 for fall-" +
      "back tag, 2 for interline rush tag.\n2-4:" +
      " carrier numeric code.\n5-10: carrier ini" +
      "tial tag number (leading zeros).\n11-13: " +
      "number of consecutive tags (allows for u" +
      "p to 999 tags).\nUp to 2 additional, non-" +
      "consecutive tags can be added.\0225\n\021select" +
      "eeIndicator\030\010 \001(\0162\032.flights.SelecteeIndi" +
      "cator\022K\n\034internationalDocVerification\030\t " +
      "\001(\0162%.flights.InternationalDocVerificati" +
      "on\022-\n\ridadIndicator\030\n \001(\0162\026.flights.IDAD" +
      "Indicator\022%\n\tfastTrack\030\013 \001(\0162\022.flights.F" +
      "astTrack*\357\002\n\017PassengerStatus\022\031\n\025ISSUED_N" +
      "OT_CHECKED_IN\020\000\022\025\n\021ISSUED_CHECKED_IN\020\001\022," +
      "\n(BAGGAGE_CHECKED_PASSENGER_NOT_CHECKED_" +
      "IN\020\002\022(\n$BAGGAGE_CHECKED_PASSENGER_CHECKE" +
      "D_IN\020\003\022#\n\037PASSENGER_PASSED_SECURITY_CHEC" +
      "K\020\004\022\031\n\025PASSENGER_PASSED_GATE\020\005\022\013\n\007TRANSI" +
      "T\020\006\022\013\n\007STANDBY\020\007\022#\n\037BOARDING_DATA_REVALI" +
      "DATION_DONE\020\010\0222\n.ORIGINAL_BOARDING_LINE_" +
      "USED_AT_TICKET_ISSUANCE\020\t\022\037\n\033UP_OR_DOWN_" +
      "GRADING_REQUIRED\020\n*\220\001\n\024PassengerDescript" +
      "ion\022\t\n\005ADULT\020\000\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002\022\t\n\005" +
      "CHILD\020\003\022\n\n\006INFANT\020\004\022\020\n\014NO_PASSENGER\020\005\022\025\n" +
      "\021ADULT_WITH_INFANT\020\006\022\027\n\023UNACCOMPANIED_MI" +
      "NOR\020\007*@\n\006Source\022\005\n\001W\020\000\022\005\n\001K\020\001\022\005\n\001X\020\002\022\005\n\001" +
      "R\020\003\022\005\n\001M\020\004\022\005\n\001O\020\005\022\005\n\001T\020\006\022\005\n\001V\020\007*\027\n\007DocTy" +
      "pe\022\005\n\001B\020\000\022\005\n\001I\020\001*M\n\034InternationalDocVeri" +
      "fication\022\020\n\014NOT_REQUIRED\020\000\022\014\n\010REQUIRED\020\001" +
      "\022\r\n\tCOMPLETED\020\002*\253\001\n\rIDADIndicator\022\010\n\004NON" +
      "E\020\000\022\010\n\004IDN1\020\001\022\010\n\004IDN2\020\002\022\010\n\004IDB1\020\003\022\010\n\004IDB" +
      "2\020\004\022\006\n\002AD\020\005\022\006\n\002DG\020\006\022\006\n\002DM\020\007\022\006\n\002GE\020\010\022\006\n\002I" +
      "G\020\t\022\006\n\002RG\020\n\022\006\n\002UD\020\013\022\006\n\002ID\020\014\022\t\n\005IDFS1\020\r\022\t" +
      "\n\005IDFS2\020\016\022\010\n\004IDR1\020\017\022\010\n\004IDR2\020\020*E\n\021Selecte" +
      "eIndicator\022\020\n\014NOT_SELECTEE\020\000\022\014\n\010SELECTEE" +
      "\020\001\022\020\n\014TSA_PRECHECK\020\003*\031\n\tFastTrack\022\005\n\001N\020\000" +
      "\022\005\n\001Y\020\001B_\n\030com.passkit.grpc.FlightsZ,sta" +
      "sh.passkit.com/io/model/sdk/go/io/flight" +
      "s\252\002\024PassKit.Grpc.Flightsb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.passkit.grpc.CommonObjects.getDescriptor(),
          grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor(),
        });
    internal_static_flights_ConditionalItems_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_flights_ConditionalItems_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_flights_ConditionalItems_descriptor,
        new java.lang.String[] { "PassengerDescription", "CheckInSource", "BoardingPassIssuanceSource", "BoardingPassIssueDate", "DocumentType", "BoardingPassIssuer", "BaggageTagNumber", "SelecteeIndicator", "InternationalDocVerification", "IdadIndicator", "FastTrack", });
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Field);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
    com.passkit.grpc.CommonObjects.getDescriptor();
    grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
