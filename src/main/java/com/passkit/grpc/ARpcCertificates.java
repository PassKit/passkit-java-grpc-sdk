// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: io/core/a_rpc_certificates.proto
// Protobuf Java Version: 4.31.0

package com.passkit.grpc;

@com.google.protobuf.Generated
public final class ARpcCertificates {
  private ARpcCertificates() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 31,
      /* patch= */ 0,
      /* suffix= */ "",
      ARpcCertificates.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n io/core/a_rpc_certificates.proto\022\002io\032\034" +
      "google/api/annotations.proto\032\033google/pro" +
      "tobuf/empty.proto\032\036io/common/common_obje" +
      "cts.proto\032 io/certificate/certificate.pr" +
      "oto\032\032io/common/pagination.proto\032\026io/comm" +
      "on/filter.proto\032.protoc-gen-openapiv2/op" +
      "tions/annotations.proto2\350\016\n\014Certificates" +
      "\022\334\001\n\027getAppleCertificateData\022\026.io.PassTy" +
      "peIdentifier\032\023.io.CertificateData\"\223\001\222Ao\022" +
      "\032Get Apple pass certificate\032QGets the ce" +
      "rtificate data for certificate with Pass" +
      " Type Identifier {passTypeId}.\202\323\344\223\002\033\022\031/c" +
      "ertificate/{passTypeId}\022\325\001\n\034getCertifica" +
      "teSigningRequest\022\026.google.protobuf.Empty" +
      "\032\035.io.CertificateSigningRequest\"~\222AK\022%Ge" +
      "t CSR (Certificate Signing Request)\032\"Get" +
      "s a CSR for the logged in user.\202\323\344\223\002*\022(/" +
      "certificate/certificate_signing_request\022" +
      "\242\001\n\023addAppleCertificate\022\r.io.FileBytes\032\023" +
      ".io.CertificateData\"g\222A;\022\025Add Apple cert" +
      "ificate\032\"Uploads an Apple pass certifica" +
      "te.\202\323\344\223\002#\"\036/certificate/apple_certificat" +
      "e:\001*\022\273\001\n\026updateAppleCertificate\022\r.io.Fil" +
      "eBytes\032\023.io.CertificateData\"}\222AQ\022\030Update" +
      " Apple certificate\0325Updates or renews an" +
      " existing Apple pass certificate.\202\323\344\223\002#\032" +
      "\036/certificate/apple_certificate:\001*\022\273\001\n\037l" +
      "istAppleCertificatesDeprecated\022\016.io.Pagi" +
      "nation\032\023.io.CertificateData\"q\222AY\022)List A" +
      "pple pass certificates [DEPRECATED]\032,Ret" +
      "rieves a users certificates [DEPRECATED]" +
      ".\202\323\344\223\002\017\022\r/certificates0\001\022\241\001\n\025listAppleCe" +
      "rtificates\022\013.io.Filters\032\023.io.Certificate" +
      "Data\"d\222A>\022\034List Apple pass certificates\032" +
      "\036Retrieves a users certificates\202\323\344\223\002\035\"\030/" +
      "certificates/apple/list:\001*0\001\022\340\001\n countAp" +
      "pleCertificatesDeprecated\022\016.io.Paginatio" +
      "n\032\t.io.Count\"\240\001\222A\201\001\022*Count Apple pass ce" +
      "rtificates [DEPRECATED]\032SRetrieves the t" +
      "otal count of pass certificates for the " +
      "logged in user [DEPRECATED].\202\323\344\223\002\025\022\023/cer" +
      "tificates/count\022\301\001\n\026countAppleCertificat" +
      "es\022\013.io.Filters\032\t.io.Count\"\216\001\222Ag\022\035Count " +
      "Apple pass certificates\032FRetrieves the t" +
      "otal count of pass certificates for the " +
      "logged in user.\202\323\344\223\002\036\"\031/certificates/app" +
      "le/count:\001*\022\264\002\n\031sendNFCSigningCredential" +
      "s\022 .io.NFCSigningCredentialsRequest\032\026.go" +
      "ogle.protobuf.Empty\"\334\001\222A\253\001\022\034Send NFC sig" +
      "ning credentials\032\212\001Sends the NFC signing" +
      " credentials for a certificate to the re" +
      "gistered email address of the user. Only" +
      " works with NFC enabled certificates.\202\323\344" +
      "\223\002\'\"\"/certificates/nfc/credentials/send:" +
      "\001*B\330\006\n\020com.passkit.grpcZ$stash.passkit.c" +
      "om/io/model/sdk/go/io\252\002\014PassKit.Grpc\222A\215\006" +
      "\022\332\001\n\030PassKit Certificates API\022CAPI for m" +
      "anaging Apple Wallet Pass Type Identifie" +
      "rs & Certificates.\0328https://passkit.com/" +
      "legal/terms-of-subscription-service/\"?\n\017" +
      "PassKit Support\022\027https://docs.passkit.io" +
      "\032\023support@passkit.com*\001\0022\020application/js" +
      "on:\020application/jsonR9\n\003200\0222\n(Returned " +
      "when the request is successful.\022\006\n\004\232\002\001\007R" +
      "4\n\003400\022-\n+Returned when wrong user input" +
      " is provided.R0\n\003401\022)\n\'Returned when th" +
      "e user is unauthorized.RP\n\003403\022I\nGReturn" +
      "ed when the user does not have permissio" +
      "n to access the resource.R;\n\003404\0224\n*Retu" +
      "rned when the resource does not exist.\022\006" +
      "\n\004\232\002\001\007R<\n\003500\0225\n+Returned when there is " +
      "an unexpected error.\022\006\n\004\232\002\001\007RW\n\003503\022P\nNS" +
      "erver is unavailable. Back off for 250ms" +
      " and repeat request until successful.Z>\n" +
      "<\n\napiKeyAuth\022.\010\002\022\031JWT Authentication to" +
      "ken.\032\rAuthorization \002b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.api.AnnotationsProto.getDescriptor(),
          com.google.protobuf.EmptyProto.getDescriptor(),
          com.passkit.grpc.CommonObjects.getDescriptor(),
          com.passkit.grpc.Certificate.getDescriptor(),
          com.passkit.grpc.PaginationOuterClass.getDescriptor(),
          com.passkit.grpc.Filter.getDescriptor(),
          grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor(),
        });
    descriptor.resolveAllFeaturesImmutable();
    com.google.api.AnnotationsProto.getDescriptor();
    com.google.protobuf.EmptyProto.getDescriptor();
    com.passkit.grpc.CommonObjects.getDescriptor();
    com.passkit.grpc.Certificate.getDescriptor();
    com.passkit.grpc.PaginationOuterClass.getDescriptor();
    com.passkit.grpc.Filter.getDescriptor();
    grpc.gateway.protoc_gen_openapiv2.options.Annotations.getDescriptor();
    com.google.protobuf.ExtensionRegistry registry =
        com.google.protobuf.ExtensionRegistry.newInstance();
    registry.add(com.google.api.AnnotationsProto.http);
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Operation);
    registry.add(grpc.gateway.protoc_gen_openapiv2.options.Annotations.openapiv2Swagger);
    com.google.protobuf.Descriptors.FileDescriptor
        .internalUpdateFileDescriptor(descriptor, registry);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
