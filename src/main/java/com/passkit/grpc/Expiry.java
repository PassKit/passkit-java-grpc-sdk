// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: io/common/expiry.proto

// Protobuf Java Version: 3.25.0
package com.passkit.grpc;

public final class Expiry {
  private Expiry() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * Options to manage the expiry date of the digital card.
   * </pre>
   *
   * Protobuf enum {@code io.ExpiryType}
   */
  public enum ExpiryType
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Please do not use this enum. This enum do not have any effect on expiry logic.
     * </pre>
     *
     * <code>EXPIRE_NONE = 0;</code>
     */
    EXPIRE_NONE(0),
    /**
     * <pre>
     * Expiry date is set with year, month and date. The expiry date will be based on your timezone. The digital card will expire at 23:59:59:59.99999 of set date in fixed timezone. The expiry date is the same for all cards.
     * </pre>
     *
     * <code>EXPIRE_ON_FIXED_DATE = 1;</code>
     */
    EXPIRE_ON_FIXED_DATE(1),
    /**
     * <pre>
     * The digital card expires after the number of days after the digital card issuing.
     * </pre>
     *
     * <code>EXPIRE_AFTER_X_DAYS = 2;</code>
     */
    EXPIRE_AFTER_X_DAYS(2),
    /**
     * <pre>
     * If you want to change expiry date for each digital card, you can use this expiry type. You can set expiry date and time in fixed timezone.
     * </pre>
     *
     * <code>EXPIRE_ON_VARIABLE_DATE_TIME = 3;</code>
     */
    EXPIRE_ON_VARIABLE_DATE_TIME(3),
    /**
     * <pre>
     * The digital card will set as NULL and the pass will not expire..
     * </pre>
     *
     * <code>EXPIRE_SET_TO_NULL = 4;</code>
     */
    EXPIRE_SET_TO_NULL(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Please do not use this enum. This enum do not have any effect on expiry logic.
     * </pre>
     *
     * <code>EXPIRE_NONE = 0;</code>
     */
    public static final int EXPIRE_NONE_VALUE = 0;
    /**
     * <pre>
     * Expiry date is set with year, month and date. The expiry date will be based on your timezone. The digital card will expire at 23:59:59:59.99999 of set date in fixed timezone. The expiry date is the same for all cards.
     * </pre>
     *
     * <code>EXPIRE_ON_FIXED_DATE = 1;</code>
     */
    public static final int EXPIRE_ON_FIXED_DATE_VALUE = 1;
    /**
     * <pre>
     * The digital card expires after the number of days after the digital card issuing.
     * </pre>
     *
     * <code>EXPIRE_AFTER_X_DAYS = 2;</code>
     */
    public static final int EXPIRE_AFTER_X_DAYS_VALUE = 2;
    /**
     * <pre>
     * If you want to change expiry date for each digital card, you can use this expiry type. You can set expiry date and time in fixed timezone.
     * </pre>
     *
     * <code>EXPIRE_ON_VARIABLE_DATE_TIME = 3;</code>
     */
    public static final int EXPIRE_ON_VARIABLE_DATE_TIME_VALUE = 3;
    /**
     * <pre>
     * The digital card will set as NULL and the pass will not expire..
     * </pre>
     *
     * <code>EXPIRE_SET_TO_NULL = 4;</code>
     */
    public static final int EXPIRE_SET_TO_NULL_VALUE = 4;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ExpiryType valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ExpiryType forNumber(int value) {
      switch (value) {
        case 0: return EXPIRE_NONE;
        case 1: return EXPIRE_ON_FIXED_DATE;
        case 2: return EXPIRE_AFTER_X_DAYS;
        case 3: return EXPIRE_ON_VARIABLE_DATE_TIME;
        case 4: return EXPIRE_SET_TO_NULL;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ExpiryType>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ExpiryType> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ExpiryType>() {
            public ExpiryType findValueByNumber(int number) {
              return ExpiryType.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.passkit.grpc.Expiry.getDescriptor().getEnumTypes().get(0);
    }

    private static final ExpiryType[] VALUES = values();

    public static ExpiryType valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ExpiryType(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:io.ExpiryType)
  }

  public interface ExpirySettingsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:io.ExpirySettings)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.io.ExpiryType expiryType = 1;</code>
     * @return The enum numeric value on the wire for expiryType.
     */
    int getExpiryTypeValue();
    /**
     * <code>.io.ExpiryType expiryType = 1;</code>
     * @return The expiryType.
     */
    com.passkit.grpc.Expiry.ExpiryType getExpiryType();

    /**
     * <pre>
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     * </pre>
     *
     * <code>.io.Date fixedExpiryDate = 2;</code>
     * @return Whether the fixedExpiryDate field is set.
     */
    boolean hasFixedExpiryDate();
    /**
     * <pre>
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     * </pre>
     *
     * <code>.io.Date fixedExpiryDate = 2;</code>
     * @return The fixedExpiryDate.
     */
    com.passkit.grpc.CommonObjects.Date getFixedExpiryDate();
    /**
     * <pre>
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     * </pre>
     *
     * <code>.io.Date fixedExpiryDate = 2;</code>
     */
    com.passkit.grpc.CommonObjects.DateOrBuilder getFixedExpiryDateOrBuilder();

    /**
     * <pre>
     * Number of days the digital membership card is expired after the enrolment date.
     * Please set expiryType as EXPIRE_AFTER_X_DAYS.
     * </pre>
     *
     * <code>uint32 expireAfterXDays = 3;</code>
     * @return Whether the expireAfterXDays field is set.
     */
    boolean hasExpireAfterXDays();
    /**
     * <pre>
     * Number of days the digital membership card is expired after the enrolment date.
     * Please set expiryType as EXPIRE_AFTER_X_DAYS.
     * </pre>
     *
     * <code>uint32 expireAfterXDays = 3;</code>
     * @return The expireAfterXDays.
     */
    int getExpireAfterXDays();

    com.passkit.grpc.Expiry.ExpirySettings.ExpiryOneofCase getExpiryOneofCase();
  }
  /**
   * <pre>
   * The digital card will be expired on the expiry date. The barcode will not be rendered on digital card and the card itself will not be updated after it has been expired.
   * </pre>
   *
   * Protobuf type {@code io.ExpirySettings}
   */
  public static final class ExpirySettings extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:io.ExpirySettings)
      ExpirySettingsOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ExpirySettings.newBuilder() to construct.
    private ExpirySettings(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ExpirySettings() {
      expiryType_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new ExpirySettings();
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.passkit.grpc.Expiry.internal_static_io_ExpirySettings_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.passkit.grpc.Expiry.internal_static_io_ExpirySettings_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.passkit.grpc.Expiry.ExpirySettings.class, com.passkit.grpc.Expiry.ExpirySettings.Builder.class);
    }

    private int expiryOneofCase_ = 0;
    @SuppressWarnings("serial")
    private java.lang.Object expiryOneof_;
    public enum ExpiryOneofCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      FIXEDEXPIRYDATE(2),
      EXPIREAFTERXDAYS(3),
      EXPIRYONEOF_NOT_SET(0);
      private final int value;
      private ExpiryOneofCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ExpiryOneofCase valueOf(int value) {
        return forNumber(value);
      }

      public static ExpiryOneofCase forNumber(int value) {
        switch (value) {
          case 2: return FIXEDEXPIRYDATE;
          case 3: return EXPIREAFTERXDAYS;
          case 0: return EXPIRYONEOF_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ExpiryOneofCase
    getExpiryOneofCase() {
      return ExpiryOneofCase.forNumber(
          expiryOneofCase_);
    }

    public static final int EXPIRYTYPE_FIELD_NUMBER = 1;
    private int expiryType_ = 0;
    /**
     * <code>.io.ExpiryType expiryType = 1;</code>
     * @return The enum numeric value on the wire for expiryType.
     */
    @java.lang.Override public int getExpiryTypeValue() {
      return expiryType_;
    }
    /**
     * <code>.io.ExpiryType expiryType = 1;</code>
     * @return The expiryType.
     */
    @java.lang.Override public com.passkit.grpc.Expiry.ExpiryType getExpiryType() {
      com.passkit.grpc.Expiry.ExpiryType result = com.passkit.grpc.Expiry.ExpiryType.forNumber(expiryType_);
      return result == null ? com.passkit.grpc.Expiry.ExpiryType.UNRECOGNIZED : result;
    }

    public static final int FIXEDEXPIRYDATE_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     * </pre>
     *
     * <code>.io.Date fixedExpiryDate = 2;</code>
     * @return Whether the fixedExpiryDate field is set.
     */
    @java.lang.Override
    public boolean hasFixedExpiryDate() {
      return expiryOneofCase_ == 2;
    }
    /**
     * <pre>
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     * </pre>
     *
     * <code>.io.Date fixedExpiryDate = 2;</code>
     * @return The fixedExpiryDate.
     */
    @java.lang.Override
    public com.passkit.grpc.CommonObjects.Date getFixedExpiryDate() {
      if (expiryOneofCase_ == 2) {
         return (com.passkit.grpc.CommonObjects.Date) expiryOneof_;
      }
      return com.passkit.grpc.CommonObjects.Date.getDefaultInstance();
    }
    /**
     * <pre>
     * The expiry date for digital membership card.
     * Please set expiryType as EXPIRE_ON_FIXED_DATE.
     * </pre>
     *
     * <code>.io.Date fixedExpiryDate = 2;</code>
     */
    @java.lang.Override
    public com.passkit.grpc.CommonObjects.DateOrBuilder getFixedExpiryDateOrBuilder() {
      if (expiryOneofCase_ == 2) {
         return (com.passkit.grpc.CommonObjects.Date) expiryOneof_;
      }
      return com.passkit.grpc.CommonObjects.Date.getDefaultInstance();
    }

    public static final int EXPIREAFTERXDAYS_FIELD_NUMBER = 3;
    /**
     * <pre>
     * Number of days the digital membership card is expired after the enrolment date.
     * Please set expiryType as EXPIRE_AFTER_X_DAYS.
     * </pre>
     *
     * <code>uint32 expireAfterXDays = 3;</code>
     * @return Whether the expireAfterXDays field is set.
     */
    @java.lang.Override
    public boolean hasExpireAfterXDays() {
      return expiryOneofCase_ == 3;
    }
    /**
     * <pre>
     * Number of days the digital membership card is expired after the enrolment date.
     * Please set expiryType as EXPIRE_AFTER_X_DAYS.
     * </pre>
     *
     * <code>uint32 expireAfterXDays = 3;</code>
     * @return The expireAfterXDays.
     */
    @java.lang.Override
    public int getExpireAfterXDays() {
      if (expiryOneofCase_ == 3) {
        return (java.lang.Integer) expiryOneof_;
      }
      return 0;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (expiryType_ != com.passkit.grpc.Expiry.ExpiryType.EXPIRE_NONE.getNumber()) {
        output.writeEnum(1, expiryType_);
      }
      if (expiryOneofCase_ == 2) {
        output.writeMessage(2, (com.passkit.grpc.CommonObjects.Date) expiryOneof_);
      }
      if (expiryOneofCase_ == 3) {
        output.writeUInt32(
            3, (int)((java.lang.Integer) expiryOneof_));
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (expiryType_ != com.passkit.grpc.Expiry.ExpiryType.EXPIRE_NONE.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, expiryType_);
      }
      if (expiryOneofCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (com.passkit.grpc.CommonObjects.Date) expiryOneof_);
      }
      if (expiryOneofCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(
              3, (int)((java.lang.Integer) expiryOneof_));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.passkit.grpc.Expiry.ExpirySettings)) {
        return super.equals(obj);
      }
      com.passkit.grpc.Expiry.ExpirySettings other = (com.passkit.grpc.Expiry.ExpirySettings) obj;

      if (expiryType_ != other.expiryType_) return false;
      if (!getExpiryOneofCase().equals(other.getExpiryOneofCase())) return false;
      switch (expiryOneofCase_) {
        case 2:
          if (!getFixedExpiryDate()
              .equals(other.getFixedExpiryDate())) return false;
          break;
        case 3:
          if (getExpireAfterXDays()
              != other.getExpireAfterXDays()) return false;
          break;
        case 0:
        default:
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + EXPIRYTYPE_FIELD_NUMBER;
      hash = (53 * hash) + expiryType_;
      switch (expiryOneofCase_) {
        case 2:
          hash = (37 * hash) + FIXEDEXPIRYDATE_FIELD_NUMBER;
          hash = (53 * hash) + getFixedExpiryDate().hashCode();
          break;
        case 3:
          hash = (37 * hash) + EXPIREAFTERXDAYS_FIELD_NUMBER;
          hash = (53 * hash) + getExpireAfterXDays();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.passkit.grpc.Expiry.ExpirySettings parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.passkit.grpc.Expiry.ExpirySettings parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.passkit.grpc.Expiry.ExpirySettings parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.passkit.grpc.Expiry.ExpirySettings prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The digital card will be expired on the expiry date. The barcode will not be rendered on digital card and the card itself will not be updated after it has been expired.
     * </pre>
     *
     * Protobuf type {@code io.ExpirySettings}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:io.ExpirySettings)
        com.passkit.grpc.Expiry.ExpirySettingsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.passkit.grpc.Expiry.internal_static_io_ExpirySettings_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.passkit.grpc.Expiry.internal_static_io_ExpirySettings_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.passkit.grpc.Expiry.ExpirySettings.class, com.passkit.grpc.Expiry.ExpirySettings.Builder.class);
      }

      // Construct using com.passkit.grpc.Expiry.ExpirySettings.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        expiryType_ = 0;
        if (fixedExpiryDateBuilder_ != null) {
          fixedExpiryDateBuilder_.clear();
        }
        expiryOneofCase_ = 0;
        expiryOneof_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.passkit.grpc.Expiry.internal_static_io_ExpirySettings_descriptor;
      }

      @java.lang.Override
      public com.passkit.grpc.Expiry.ExpirySettings getDefaultInstanceForType() {
        return com.passkit.grpc.Expiry.ExpirySettings.getDefaultInstance();
      }

      @java.lang.Override
      public com.passkit.grpc.Expiry.ExpirySettings build() {
        com.passkit.grpc.Expiry.ExpirySettings result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.passkit.grpc.Expiry.ExpirySettings buildPartial() {
        com.passkit.grpc.Expiry.ExpirySettings result = new com.passkit.grpc.Expiry.ExpirySettings(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        buildPartialOneofs(result);
        onBuilt();
        return result;
      }

      private void buildPartial0(com.passkit.grpc.Expiry.ExpirySettings result) {
        int from_bitField0_ = bitField0_;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.expiryType_ = expiryType_;
        }
      }

      private void buildPartialOneofs(com.passkit.grpc.Expiry.ExpirySettings result) {
        result.expiryOneofCase_ = expiryOneofCase_;
        result.expiryOneof_ = this.expiryOneof_;
        if (expiryOneofCase_ == 2 &&
            fixedExpiryDateBuilder_ != null) {
          result.expiryOneof_ = fixedExpiryDateBuilder_.build();
        }
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.passkit.grpc.Expiry.ExpirySettings) {
          return mergeFrom((com.passkit.grpc.Expiry.ExpirySettings)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.passkit.grpc.Expiry.ExpirySettings other) {
        if (other == com.passkit.grpc.Expiry.ExpirySettings.getDefaultInstance()) return this;
        if (other.expiryType_ != 0) {
          setExpiryTypeValue(other.getExpiryTypeValue());
        }
        switch (other.getExpiryOneofCase()) {
          case FIXEDEXPIRYDATE: {
            mergeFixedExpiryDate(other.getFixedExpiryDate());
            break;
          }
          case EXPIREAFTERXDAYS: {
            setExpireAfterXDays(other.getExpireAfterXDays());
            break;
          }
          case EXPIRYONEOF_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                expiryType_ = input.readEnum();
                bitField0_ |= 0x00000001;
                break;
              } // case 8
              case 18: {
                input.readMessage(
                    getFixedExpiryDateFieldBuilder().getBuilder(),
                    extensionRegistry);
                expiryOneofCase_ = 2;
                break;
              } // case 18
              case 24: {
                expiryOneof_ = input.readUInt32();
                expiryOneofCase_ = 3;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int expiryOneofCase_ = 0;
      private java.lang.Object expiryOneof_;
      public ExpiryOneofCase
          getExpiryOneofCase() {
        return ExpiryOneofCase.forNumber(
            expiryOneofCase_);
      }

      public Builder clearExpiryOneof() {
        expiryOneofCase_ = 0;
        expiryOneof_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int expiryType_ = 0;
      /**
       * <code>.io.ExpiryType expiryType = 1;</code>
       * @return The enum numeric value on the wire for expiryType.
       */
      @java.lang.Override public int getExpiryTypeValue() {
        return expiryType_;
      }
      /**
       * <code>.io.ExpiryType expiryType = 1;</code>
       * @param value The enum numeric value on the wire for expiryType to set.
       * @return This builder for chaining.
       */
      public Builder setExpiryTypeValue(int value) {
        expiryType_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>.io.ExpiryType expiryType = 1;</code>
       * @return The expiryType.
       */
      @java.lang.Override
      public com.passkit.grpc.Expiry.ExpiryType getExpiryType() {
        com.passkit.grpc.Expiry.ExpiryType result = com.passkit.grpc.Expiry.ExpiryType.forNumber(expiryType_);
        return result == null ? com.passkit.grpc.Expiry.ExpiryType.UNRECOGNIZED : result;
      }
      /**
       * <code>.io.ExpiryType expiryType = 1;</code>
       * @param value The expiryType to set.
       * @return This builder for chaining.
       */
      public Builder setExpiryType(com.passkit.grpc.Expiry.ExpiryType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        expiryType_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.io.ExpiryType expiryType = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpiryType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        expiryType_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilderV3<
          com.passkit.grpc.CommonObjects.Date, com.passkit.grpc.CommonObjects.Date.Builder, com.passkit.grpc.CommonObjects.DateOrBuilder> fixedExpiryDateBuilder_;
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       * @return Whether the fixedExpiryDate field is set.
       */
      @java.lang.Override
      public boolean hasFixedExpiryDate() {
        return expiryOneofCase_ == 2;
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       * @return The fixedExpiryDate.
       */
      @java.lang.Override
      public com.passkit.grpc.CommonObjects.Date getFixedExpiryDate() {
        if (fixedExpiryDateBuilder_ == null) {
          if (expiryOneofCase_ == 2) {
            return (com.passkit.grpc.CommonObjects.Date) expiryOneof_;
          }
          return com.passkit.grpc.CommonObjects.Date.getDefaultInstance();
        } else {
          if (expiryOneofCase_ == 2) {
            return fixedExpiryDateBuilder_.getMessage();
          }
          return com.passkit.grpc.CommonObjects.Date.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      public Builder setFixedExpiryDate(com.passkit.grpc.CommonObjects.Date value) {
        if (fixedExpiryDateBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          expiryOneof_ = value;
          onChanged();
        } else {
          fixedExpiryDateBuilder_.setMessage(value);
        }
        expiryOneofCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      public Builder setFixedExpiryDate(
          com.passkit.grpc.CommonObjects.Date.Builder builderForValue) {
        if (fixedExpiryDateBuilder_ == null) {
          expiryOneof_ = builderForValue.build();
          onChanged();
        } else {
          fixedExpiryDateBuilder_.setMessage(builderForValue.build());
        }
        expiryOneofCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      public Builder mergeFixedExpiryDate(com.passkit.grpc.CommonObjects.Date value) {
        if (fixedExpiryDateBuilder_ == null) {
          if (expiryOneofCase_ == 2 &&
              expiryOneof_ != com.passkit.grpc.CommonObjects.Date.getDefaultInstance()) {
            expiryOneof_ = com.passkit.grpc.CommonObjects.Date.newBuilder((com.passkit.grpc.CommonObjects.Date) expiryOneof_)
                .mergeFrom(value).buildPartial();
          } else {
            expiryOneof_ = value;
          }
          onChanged();
        } else {
          if (expiryOneofCase_ == 2) {
            fixedExpiryDateBuilder_.mergeFrom(value);
          } else {
            fixedExpiryDateBuilder_.setMessage(value);
          }
        }
        expiryOneofCase_ = 2;
        return this;
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      public Builder clearFixedExpiryDate() {
        if (fixedExpiryDateBuilder_ == null) {
          if (expiryOneofCase_ == 2) {
            expiryOneofCase_ = 0;
            expiryOneof_ = null;
            onChanged();
          }
        } else {
          if (expiryOneofCase_ == 2) {
            expiryOneofCase_ = 0;
            expiryOneof_ = null;
          }
          fixedExpiryDateBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      public com.passkit.grpc.CommonObjects.Date.Builder getFixedExpiryDateBuilder() {
        return getFixedExpiryDateFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      @java.lang.Override
      public com.passkit.grpc.CommonObjects.DateOrBuilder getFixedExpiryDateOrBuilder() {
        if ((expiryOneofCase_ == 2) && (fixedExpiryDateBuilder_ != null)) {
          return fixedExpiryDateBuilder_.getMessageOrBuilder();
        } else {
          if (expiryOneofCase_ == 2) {
            return (com.passkit.grpc.CommonObjects.Date) expiryOneof_;
          }
          return com.passkit.grpc.CommonObjects.Date.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * The expiry date for digital membership card.
       * Please set expiryType as EXPIRE_ON_FIXED_DATE.
       * </pre>
       *
       * <code>.io.Date fixedExpiryDate = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.passkit.grpc.CommonObjects.Date, com.passkit.grpc.CommonObjects.Date.Builder, com.passkit.grpc.CommonObjects.DateOrBuilder> 
          getFixedExpiryDateFieldBuilder() {
        if (fixedExpiryDateBuilder_ == null) {
          if (!(expiryOneofCase_ == 2)) {
            expiryOneof_ = com.passkit.grpc.CommonObjects.Date.getDefaultInstance();
          }
          fixedExpiryDateBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.passkit.grpc.CommonObjects.Date, com.passkit.grpc.CommonObjects.Date.Builder, com.passkit.grpc.CommonObjects.DateOrBuilder>(
                  (com.passkit.grpc.CommonObjects.Date) expiryOneof_,
                  getParentForChildren(),
                  isClean());
          expiryOneof_ = null;
        }
        expiryOneofCase_ = 2;
        onChanged();
        return fixedExpiryDateBuilder_;
      }

      /**
       * <pre>
       * Number of days the digital membership card is expired after the enrolment date.
       * Please set expiryType as EXPIRE_AFTER_X_DAYS.
       * </pre>
       *
       * <code>uint32 expireAfterXDays = 3;</code>
       * @return Whether the expireAfterXDays field is set.
       */
      public boolean hasExpireAfterXDays() {
        return expiryOneofCase_ == 3;
      }
      /**
       * <pre>
       * Number of days the digital membership card is expired after the enrolment date.
       * Please set expiryType as EXPIRE_AFTER_X_DAYS.
       * </pre>
       *
       * <code>uint32 expireAfterXDays = 3;</code>
       * @return The expireAfterXDays.
       */
      public int getExpireAfterXDays() {
        if (expiryOneofCase_ == 3) {
          return (java.lang.Integer) expiryOneof_;
        }
        return 0;
      }
      /**
       * <pre>
       * Number of days the digital membership card is expired after the enrolment date.
       * Please set expiryType as EXPIRE_AFTER_X_DAYS.
       * </pre>
       *
       * <code>uint32 expireAfterXDays = 3;</code>
       * @param value The expireAfterXDays to set.
       * @return This builder for chaining.
       */
      public Builder setExpireAfterXDays(int value) {

        expiryOneofCase_ = 3;
        expiryOneof_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Number of days the digital membership card is expired after the enrolment date.
       * Please set expiryType as EXPIRE_AFTER_X_DAYS.
       * </pre>
       *
       * <code>uint32 expireAfterXDays = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearExpireAfterXDays() {
        if (expiryOneofCase_ == 3) {
          expiryOneofCase_ = 0;
          expiryOneof_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:io.ExpirySettings)
    }

    // @@protoc_insertion_point(class_scope:io.ExpirySettings)
    private static final com.passkit.grpc.Expiry.ExpirySettings DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.passkit.grpc.Expiry.ExpirySettings();
    }

    public static com.passkit.grpc.Expiry.ExpirySettings getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ExpirySettings>
        PARSER = new com.google.protobuf.AbstractParser<ExpirySettings>() {
      @java.lang.Override
      public ExpirySettings parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<ExpirySettings> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ExpirySettings> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.passkit.grpc.Expiry.ExpirySettings getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_io_ExpirySettings_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_io_ExpirySettings_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026io/common/expiry.proto\022\002io\032\036io/common/" +
      "common_objects.proto\"\204\001\n\016ExpirySettings\022" +
      "\"\n\nexpiryType\030\001 \001(\0162\016.io.ExpiryType\022#\n\017f" +
      "ixedExpiryDate\030\002 \001(\0132\010.io.DateH\000\022\032\n\020expi" +
      "reAfterXDays\030\003 \001(\rH\000B\r\n\013expiryOneof*\212\001\n\n" +
      "ExpiryType\022\017\n\013EXPIRE_NONE\020\000\022\030\n\024EXPIRE_ON" +
      "_FIXED_DATE\020\001\022\027\n\023EXPIRE_AFTER_X_DAYS\020\002\022 " +
      "\n\034EXPIRE_ON_VARIABLE_DATE_TIME\020\003\022\026\n\022EXPI" +
      "RE_SET_TO_NULL\020\004BG\n\020com.passkit.grpcZ$st" +
      "ash.passkit.com/io/model/sdk/go/io\252\002\014Pas" +
      "sKit.Grpcb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.passkit.grpc.CommonObjects.getDescriptor(),
        });
    internal_static_io_ExpirySettings_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_io_ExpirySettings_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_io_ExpirySettings_descriptor,
        new java.lang.String[] { "ExpiryType", "FixedExpiryDate", "ExpireAfterXDays", "ExpiryOneof", });
    com.passkit.grpc.CommonObjects.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
